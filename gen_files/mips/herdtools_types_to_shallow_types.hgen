let is_inc = false

let translate_rtype_op op  = uppercase (pp_rtype_op op)

let translate_rtype_op op x = match op with
  | MIPSROpADD    -> ADD x
  | MIPSROpADDU   -> ADDU x
  | MIPSROpAND    -> AND x
  | MIPSROpDADD   -> DADD x
  | MIPSROpDADDU  -> DADDU x
  | MIPSROpDSUB   -> DSUB x
  | MIPSROpDSUBU  -> DSUBU x
  | MIPSROpMOVN   -> MOVN x
  | MIPSROpMOVZ   -> MOVZ x
  | MIPSROpMUL    -> MUL0 x
  | MIPSROpNOR    -> NOR x
  | MIPSROpOR     -> OR x
  | MIPSROpSLT    -> SLT x 
  | MIPSROpSLTU   -> SLTU x
  | MIPSROpSUB    -> SUB x
  | MIPSROpSUBU   -> SUBU x
  | MIPSROpXOR    -> XOR x

let translate_itype_op op x = match op with
  | MIPSIOpADDI   -> ADDI x
  | MIPSIOpADDIU  -> ADDIU x
  | MIPSIOpANDI   -> ANDI x
  | MIPSIOpDADDI  -> DADDI x
  | MIPSIOpDADDIU -> DADDIU x
  | MIPSIOpORI    -> ORI x
  | MIPSIOpSLTI   -> SLTI x
  | MIPSIOpSLTIU  -> SLTIU x
  | MIPSIOpXORI   -> XORI x

let translate_shifti_op op x = match op with
  | MIPSDSLL   -> DSLL x 
  | MIPSDSLL32 -> DSLL32 x
  | MIPSDSRA   -> DSRA x
  | MIPSDSRA32 -> DSRA32 x
  | MIPSDSRL   -> DSRL x
  | MIPSDSRL32 -> DSRL32 x
  | MIPSSLL    -> SLL x
  | MIPSSRA    -> SRA x 
  | MIPSSRL    -> SRL x 

let translate_shiftv_op op x = match op with
  | MIPSDSLLV -> DSLLV x
  | MIPSDSRAV -> DSRAV x
  | MIPSDSRLV -> DSRLV x
  | MIPSSLLV  -> SLLV x 
  | MIPSSRAV  -> SRAV x 
  | MIPSSRLV  -> SRLV x 

let translate_muldiv_op op x = match op with
  | MIPSDDIV   -> DDIV x  
  | MIPSDDIVU  -> DDIVU x 
  | MIPSDIV    -> DIV0 x   
  | MIPSDIVU   -> DIVU x  
  | MIPSDMULT  -> DMULT x 
  | MIPSDMULTU -> DMULTU x
  | MIPSMADD   -> MADD x  
  | MIPSMADDU  -> MADDU x 
  | MIPSMSUB   -> MSUB x  
  | MIPSMSUBU  -> MSUBU x 
  | MIPSMULT   -> MULT x  
  | MIPSMULTU  -> MULTU x 

let translate_mfhilo_op op x = match op with
  | MIPSMFHI -> MFHI x
  | MIPSMFLO -> MFLO x
  | MIPSMTHI -> MTHI x
  | MIPSMTLO -> MTLO x

let translate_load_op width signed linked = uppercase (pp_load_op width signed linked)

let translate_store_op width conditional  = uppercase (pp_store_op width conditional)

let translate_lslr_op store double left x = match (store,double,left) with
  | (false, false, true ) -> LWL x
  | (false, false, false) -> LWR x
  | (false, true , true ) -> LDL x
  | (false, true , false) -> LDR x
  | (true , false, true ) -> SWL x
  | (true , false, false) -> SWR x
  | (true , true , true ) -> SDL x
  | (true , true , false) -> SDR x

let translate_beq_op ne likely            = uppercase (pp_beq_op ne likely)

let translate_bcmpz_op cmp link likely    = uppercase (pp_bcmpz_op cmp link likely)


let translate_reg name value = 
    Sail_values.to_vec0 is_inc (Nat_big_num.of_int 5,Nat_big_num.of_int (reg_to_int value))

let translate_imm26 name value = 
    Sail_values.to_vec0 is_inc (Nat_big_num.of_int 26,Nat_big_num.of_int value)
let translate_imm16 name value = 
    Sail_values.to_vec0 is_inc (Nat_big_num.of_int 16,Nat_big_num.of_int value)
let translate_imm5 name value = 
    Sail_values.to_vec0 is_inc (Nat_big_num.of_int 5,Nat_big_num.of_int value)
let translate_bool name = function
  | true -> Sail_values.B1
  | false -> Sail_values.B0

let translate_wordsize _ = function
 | MIPSByte -> Mips_embed_types.B2
 | MIPSHalf -> Mips_embed_types.H
 | MIPSWord -> Mips_embed_types.W
 | MIPSDouble -> Mips_embed_types.D

let translate_cmp _ = function
  | MIPS_EQ  -> EQ'
  | MIPS_NE  -> NE
  | MIPS_GE  -> GE
  | MIPS_GEU -> GEU
  | MIPS_GT  -> GT'
  | MIPS_LE  -> LE
  | MIPS_LT  -> LT'
  | MIPS_LTU -> LTU
