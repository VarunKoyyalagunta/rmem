(*Generated by Sail from power.sail.*)
open import Pervasives_extra
open import Sail_impl_base
open import Sail_values
let build_cr regname =
  Register regname 32 32 true 
           [("CR0", (32 , 35));
            ("LT'", (32 , 32));
            ("GT'", (33 , 33));
            ("EQ'", (34 , 34));
            ("SO", (35 , 35));
            ("CR1", (36 , 39));
            ("FX", (36 , 36));
            ("FEX", (37 , 37));
            ("VX", (38 , 38));
            ("OX", (39 , 39));
            ("CR2", (40 , 43));
            ("CR3", (44 , 47));
            ("CR4", (48 , 51));
            ("CR5", (52 , 55));
            ("CR6", (56 , 59));
            ("CR7", (60 , 63))]

let CTR = Register "CTR" 64 0 true []

let LR = Register "LR" 64 0 true []

let build_xer regname =
  Register regname 64 0 true 
           [("SO", (32 , 32)); ("OV", (33 , 33)); ("CA", (34 , 34))]

let GPR0 = Register "GPR0" 64 0 true []

let GPR1 = Register "GPR1" 64 0 true []

let GPR2 = Register "GPR2" 64 0 true []

let GPR3 = Register "GPR3" 64 0 true []

let GPR4 = Register "GPR4" 64 0 true []

let GPR5 = Register "GPR5" 64 0 true []

let GPR6 = Register "GPR6" 64 0 true []

let GPR7 = Register "GPR7" 64 0 true []

let GPR8 = Register "GPR8" 64 0 true []

let GPR9 = Register "GPR9" 64 0 true []

let GPR10 = Register "GPR10" 64 0 true []

let GPR11 = Register "GPR11" 64 0 true []

let GPR12 = Register "GPR12" 64 0 true []

let GPR13 = Register "GPR13" 64 0 true []

let GPR14 = Register "GPR14" 64 0 true []

let GPR15 = Register "GPR15" 64 0 true []

let GPR16 = Register "GPR16" 64 0 true []

let GPR17 = Register "GPR17" 64 0 true []

let GPR18 = Register "GPR18" 64 0 true []

let GPR19 = Register "GPR19" 64 0 true []

let GPR20 = Register "GPR20" 64 0 true []

let GPR21 = Register "GPR21" 64 0 true []

let GPR22 = Register "GPR22" 64 0 true []

let GPR23 = Register "GPR23" 64 0 true []

let GPR24 = Register "GPR24" 64 0 true []

let GPR25 = Register "GPR25" 64 0 true []

let GPR26 = Register "GPR26" 64 0 true []

let GPR27 = Register "GPR27" 64 0 true []

let GPR28 = Register "GPR28" 64 0 true []

let GPR29 = Register "GPR29" 64 0 true []

let GPR30 = Register "GPR30" 64 0 true []

let GPR31 = Register "GPR31" 64 0 true []

let VRSAVE = Register "VRSAVE" 32 32 true []

let SPRG3 = Register "SPRG3" 64 0 true []

let SPRG4 = Register "SPRG4" 64 0 true []

let SPRG5 = Register "SPRG5" 64 0 true []

let SPRG6 = Register "SPRG6" 64 0 true []

let SPRG7 = Register "SPRG7" 64 0 true []

let DCR0 = Register "DCR0" 64 0 true []

let DCR1 = Register "DCR1" 64 0 true []

let FPR0 = Register "FPR0" 64 0 true []

let FPR1 = Register "FPR1" 64 0 true []

let FPR2 = Register "FPR2" 64 0 true []

let FPR3 = Register "FPR3" 64 0 true []

let FPR4 = Register "FPR4" 64 0 true []

let FPR5 = Register "FPR5" 64 0 true []

let FPR6 = Register "FPR6" 64 0 true []

let FPR7 = Register "FPR7" 64 0 true []

let FPR8 = Register "FPR8" 64 0 true []

let FPR9 = Register "FPR9" 64 0 true []

let FPR10 = Register "FPR10" 64 0 true []

let FPR11 = Register "FPR11" 64 0 true []

let FPR12 = Register "FPR12" 64 0 true []

let FPR13 = Register "FPR13" 64 0 true []

let FPR14 = Register "FPR14" 64 0 true []

let FPR15 = Register "FPR15" 64 0 true []

let FPR16 = Register "FPR16" 64 0 true []

let FPR17 = Register "FPR17" 64 0 true []

let FPR18 = Register "FPR18" 64 0 true []

let FPR19 = Register "FPR19" 64 0 true []

let FPR20 = Register "FPR20" 64 0 true []

let FPR21 = Register "FPR21" 64 0 true []

let FPR22 = Register "FPR22" 64 0 true []

let FPR23 = Register "FPR23" 64 0 true []

let FPR24 = Register "FPR24" 64 0 true []

let FPR25 = Register "FPR25" 64 0 true []

let FPR26 = Register "FPR26" 64 0 true []

let FPR27 = Register "FPR27" 64 0 true []

let FPR28 = Register "FPR28" 64 0 true []

let FPR29 = Register "FPR29" 64 0 true []

let FPR30 = Register "FPR30" 64 0 true []

let FPR31 = Register "FPR31" 64 0 true []

let build_fpscr regname =
  Register regname 64 0 true 
           [("FX", (32 , 32));
            ("FEX", (33 , 33));
            ("VX", (34 , 34));
            ("OX", (35 , 35));
            ("UX", (36 , 36));
            ("ZX", (37 , 37));
            ("XX", (38 , 38));
            ("VXSNAN", (39 , 39));
            ("VXISI", (40 , 40));
            ("VXIDI", (41 , 41));
            ("VXZDZ", (42 , 42));
            ("VXIMZ", (43 , 43));
            ("VXVC", (44 , 44));
            ("FR", (45 , 45));
            ("FI", (46 , 46));
            ("FPRF", (47 , 51));
            ("C", (47 , 47));
            ("FPCC", (48 , 51));
            ("FL", (48 , 48));
            ("FG", (49 , 49));
            ("FE", (50 , 50));
            ("FU", (51 , 51));
            ("VXSOFT", (53 , 53));
            ("VXSQRT", (54 , 54));
            ("VXCVI", (55 , 55));
            ("VE", (56 , 56));
            ("OE", (57 , 57));
            ("UE", (58 , 58));
            ("ZE", (59 , 59));
            ("XE", (60 , 60));
            ("NI", (61 , 61));
            ("RN", (62 , 63))]

let VR0 = Register "VR0" 128 0 true []

let VR1 = Register "VR1" 128 0 true []

let VR2 = Register "VR2" 128 0 true []

let VR3 = Register "VR3" 128 0 true []

let VR4 = Register "VR4" 128 0 true []

let VR5 = Register "VR5" 128 0 true []

let VR6 = Register "VR6" 128 0 true []

let VR7 = Register "VR7" 128 0 true []

let VR8 = Register "VR8" 128 0 true []

let VR9 = Register "VR9" 128 0 true []

let VR10 = Register "VR10" 128 0 true []

let VR11 = Register "VR11" 128 0 true []

let VR12 = Register "VR12" 128 0 true []

let VR13 = Register "VR13" 128 0 true []

let VR14 = Register "VR14" 128 0 true []

let VR15 = Register "VR15" 128 0 true []

let VR16 = Register "VR16" 128 0 true []

let VR17 = Register "VR17" 128 0 true []

let VR18 = Register "VR18" 128 0 true []

let VR19 = Register "VR19" 128 0 true []

let VR20 = Register "VR20" 128 0 true []

let VR21 = Register "VR21" 128 0 true []

let VR22 = Register "VR22" 128 0 true []

let VR23 = Register "VR23" 128 0 true []

let VR24 = Register "VR24" 128 0 true []

let VR25 = Register "VR25" 128 0 true []

let VR26 = Register "VR26" 128 0 true []

let VR27 = Register "VR27" 128 0 true []

let VR28 = Register "VR28" 128 0 true []

let VR29 = Register "VR29" 128 0 true []

let VR30 = Register "VR30" 128 0 true []

let VR31 = Register "VR31" 128 0 true []

let build_vscr regname = Register regname 32 96 true [("NJ", (111 , 111)); ("SAT", (127 , 127))]

let NIA = Register "NIA" 64 0 true []

let CIA = Register "CIA" 64 0 true []

let mode64bit = Register "mode64bit" 1 0 true []

let bigendianmode = Register "bigendianmode" 1 0 true []

type ast =
  | B of (vector bitU * bitU * bitU)
  | Bc of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Bclr of (vector bitU * vector bitU * vector bitU * bitU)
  | Bcctr of (vector bitU * vector bitU * vector bitU * bitU)
  | Crand of (vector bitU * vector bitU * vector bitU)
  | Crnand of (vector bitU * vector bitU * vector bitU)
  | Cror of (vector bitU * vector bitU * vector bitU)
  | Crxor of (vector bitU * vector bitU * vector bitU)
  | Crnor of (vector bitU * vector bitU * vector bitU)
  | Creqv of (vector bitU * vector bitU * vector bitU)
  | Crandc of (vector bitU * vector bitU * vector bitU)
  | Crorc of (vector bitU * vector bitU * vector bitU)
  | Mcrf of (vector bitU * vector bitU)
  | Sc of (vector bitU)
  | Scv of (vector bitU)
  | Lbz of (vector bitU * vector bitU * vector bitU)
  | Lbzx of (vector bitU * vector bitU * vector bitU)
  | Lbzu of (vector bitU * vector bitU * vector bitU)
  | Lbzux of (vector bitU * vector bitU * vector bitU)
  | Lhz of (vector bitU * vector bitU * vector bitU)
  | Lhzx of (vector bitU * vector bitU * vector bitU)
  | Lhzu of (vector bitU * vector bitU * vector bitU)
  | Lhzux of (vector bitU * vector bitU * vector bitU)
  | Lha of (vector bitU * vector bitU * vector bitU)
  | Lhax of (vector bitU * vector bitU * vector bitU)
  | Lhau of (vector bitU * vector bitU * vector bitU)
  | Lhaux of (vector bitU * vector bitU * vector bitU)
  | Lwz of (vector bitU * vector bitU * vector bitU)
  | Lwzx of (vector bitU * vector bitU * vector bitU)
  | Lwzu of (vector bitU * vector bitU * vector bitU)
  | Lwzux of (vector bitU * vector bitU * vector bitU)
  | Lwa of (vector bitU * vector bitU * vector bitU)
  | Lwax of (vector bitU * vector bitU * vector bitU)
  | Lwaux of (vector bitU * vector bitU * vector bitU)
  | Ld of (vector bitU * vector bitU * vector bitU)
  | Ldx of (vector bitU * vector bitU * vector bitU)
  | Ldu of (vector bitU * vector bitU * vector bitU)
  | Ldux of (vector bitU * vector bitU * vector bitU)
  | Stb of (vector bitU * vector bitU * vector bitU)
  | Stbx of (vector bitU * vector bitU * vector bitU)
  | Stbu of (vector bitU * vector bitU * vector bitU)
  | Stbux of (vector bitU * vector bitU * vector bitU)
  | Sth of (vector bitU * vector bitU * vector bitU)
  | Sthx of (vector bitU * vector bitU * vector bitU)
  | Sthu of (vector bitU * vector bitU * vector bitU)
  | Sthux of (vector bitU * vector bitU * vector bitU)
  | Stw of (vector bitU * vector bitU * vector bitU)
  | Stwx of (vector bitU * vector bitU * vector bitU)
  | Stwu of (vector bitU * vector bitU * vector bitU)
  | Stwux of (vector bitU * vector bitU * vector bitU)
  | Std of (vector bitU * vector bitU * vector bitU)
  | Stdx of (vector bitU * vector bitU * vector bitU)
  | Stdu of (vector bitU * vector bitU * vector bitU)
  | Stdux of (vector bitU * vector bitU * vector bitU)
  | Lq of (vector bitU * vector bitU * vector bitU * vector bitU)
  | Stq of (vector bitU * vector bitU * vector bitU)
  | Lhbrx of (vector bitU * vector bitU * vector bitU)
  | Sthbrx of (vector bitU * vector bitU * vector bitU)
  | Lwbrx of (vector bitU * vector bitU * vector bitU)
  | Stwbrx of (vector bitU * vector bitU * vector bitU)
  | Ldbrx of (vector bitU * vector bitU * vector bitU)
  | Stdbrx of (vector bitU * vector bitU * vector bitU)
  | Lmw of (vector bitU * vector bitU * vector bitU)
  | Stmw of (vector bitU * vector bitU * vector bitU)
  | Lswi of (vector bitU * vector bitU * vector bitU)
  | Lswx of (vector bitU * vector bitU * vector bitU)
  | Stswi of (vector bitU * vector bitU * vector bitU)
  | Stswx of (vector bitU * vector bitU * vector bitU)
  | Addi of (vector bitU * vector bitU * vector bitU)
  | Addis of (vector bitU * vector bitU * vector bitU)
  | Add of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Subf of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Addic of (vector bitU * vector bitU * vector bitU)
  | AddicDot of (vector bitU * vector bitU * vector bitU)
  | Subfic of (vector bitU * vector bitU * vector bitU)
  | Addc of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Subfc of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Adde of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Subfe of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Addme of (vector bitU * vector bitU * bitU * bitU)
  | Subfme of (vector bitU * vector bitU * bitU * bitU)
  | Addze of (vector bitU * vector bitU * bitU * bitU)
  | Subfze of (vector bitU * vector bitU * bitU * bitU)
  | Neg of (vector bitU * vector bitU * bitU * bitU)
  | Mulli of (vector bitU * vector bitU * vector bitU)
  | Mullw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Mulhw of (vector bitU * vector bitU * vector bitU * bitU)
  | Mulhwu of (vector bitU * vector bitU * vector bitU * bitU)
  | Divw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Divwu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Divwe of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Divweu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Mulld of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Mulhd of (vector bitU * vector bitU * vector bitU * bitU)
  | Mulhdu of (vector bitU * vector bitU * vector bitU * bitU)
  | Divd of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Divdu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Divde of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Divdeu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Cmpi of (vector bitU * bitU * vector bitU * vector bitU)
  | Cmp of (vector bitU * bitU * vector bitU * vector bitU)
  | Cmpli of (vector bitU * bitU * vector bitU * vector bitU)
  | Cmpl of (vector bitU * bitU * vector bitU * vector bitU)
  | Isel of (vector bitU * vector bitU * vector bitU * vector bitU)
  | Andi of (vector bitU * vector bitU * vector bitU)
  | Andis of (vector bitU * vector bitU * vector bitU)
  | Ori of (vector bitU * vector bitU * vector bitU)
  | Oris of (vector bitU * vector bitU * vector bitU)
  | Xori of (vector bitU * vector bitU * vector bitU)
  | Xoris of (vector bitU * vector bitU * vector bitU)
  | And of (vector bitU * vector bitU * vector bitU * bitU)
  | Xor of (vector bitU * vector bitU * vector bitU * bitU)
  | Nand of (vector bitU * vector bitU * vector bitU * bitU)
  | Or of (vector bitU * vector bitU * vector bitU * bitU)
  | Nor of (vector bitU * vector bitU * vector bitU * bitU)
  | Eqv of (vector bitU * vector bitU * vector bitU * bitU)
  | Andc of (vector bitU * vector bitU * vector bitU * bitU)
  | Orc of (vector bitU * vector bitU * vector bitU * bitU)
  | Extsb of (vector bitU * vector bitU * bitU)
  | Extsh of (vector bitU * vector bitU * bitU)
  | Cntlzw of (vector bitU * vector bitU * bitU)
  | Cmpb of (vector bitU * vector bitU * vector bitU)
  | Popcntb of (vector bitU * vector bitU)
  | Popcntw of (vector bitU * vector bitU)
  | Prtyd of (vector bitU * vector bitU)
  | Prtyw of (vector bitU * vector bitU)
  | Extsw of (vector bitU * vector bitU * bitU)
  | Cntlzd of (vector bitU * vector bitU * bitU)
  | Popcntd of (vector bitU * vector bitU)
  | Bpermd of (vector bitU * vector bitU * vector bitU)
  | Rlwinm of (vector bitU * vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rlwnm of (vector bitU * vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rlwimi of (vector bitU * vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rldicl of (vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rldicr of (vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rldic of (vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rldcl of (vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rldcr of (vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Rldimi of (vector bitU * vector bitU * vector bitU * vector bitU * bitU)
  | Slw of (vector bitU * vector bitU * vector bitU * bitU)
  | Srw of (vector bitU * vector bitU * vector bitU * bitU)
  | Srawi of (vector bitU * vector bitU * vector bitU * bitU)
  | Sraw of (vector bitU * vector bitU * vector bitU * bitU)
  | Sld of (vector bitU * vector bitU * vector bitU * bitU)
  | Srd of (vector bitU * vector bitU * vector bitU * bitU)
  | Sradi of (vector bitU * vector bitU * vector bitU * bitU)
  | Srad of (vector bitU * vector bitU * vector bitU * bitU)
  | Cdtbcd of (vector bitU * vector bitU)
  | Cbcdtd of (vector bitU * vector bitU)
  | Addg6s of (vector bitU * vector bitU * vector bitU)
  | Mtspr of (vector bitU * vector bitU)
  | Mfspr of (vector bitU * vector bitU)
  | Mtcrf of (vector bitU * vector bitU)
  | Mfcr of (vector bitU)
  | Mtocrf of (vector bitU * vector bitU)
  | Mfocrf of (vector bitU * vector bitU)
  | Mcrxr of (vector bitU)
  | Dlmzb of (vector bitU * vector bitU * vector bitU * bitU)
  | Macchw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Macchws of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Macchwu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Macchwsu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Machhw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Machhws of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Machhwu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Machhwsu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Maclhw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Maclhws of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Maclhwu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Maclhwsu of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Mulchw of (vector bitU * vector bitU * vector bitU * bitU)
  | Mulchwu of (vector bitU * vector bitU * vector bitU * bitU)
  | Mulhhw of (vector bitU * vector bitU * vector bitU * bitU)
  | Mulhhwu of (vector bitU * vector bitU * vector bitU * bitU)
  | Mullhw of (vector bitU * vector bitU * vector bitU * bitU)
  | Mullhwu of (vector bitU * vector bitU * vector bitU * bitU)
  | Nmacchw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Nmacchws of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Nmachhw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Nmachhws of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Nmaclhw of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Nmaclhws of (vector bitU * vector bitU * vector bitU * bitU * bitU)
  | Icbi of (vector bitU * vector bitU)
  | Icbt of (vector bitU * vector bitU * vector bitU)
  | Dcba of (vector bitU * vector bitU)
  | Dcbt of (vector bitU * vector bitU * vector bitU)
  | Dcbtst of (vector bitU * vector bitU * vector bitU)
  | Dcbz of (vector bitU * vector bitU)
  | Dcbst of (vector bitU * vector bitU)
  | Dcbf of (vector bitU * vector bitU * vector bitU)
  | Isync
  | Lbarx of (vector bitU * vector bitU * vector bitU * bitU)
  | Lharx of (vector bitU * vector bitU * vector bitU * bitU)
  | Lwarx of (vector bitU * vector bitU * vector bitU * bitU)
  | Stbcx of (vector bitU * vector bitU * vector bitU)
  | Sthcx of (vector bitU * vector bitU * vector bitU)
  | Stwcx of (vector bitU * vector bitU * vector bitU)
  | Ldarx of (vector bitU * vector bitU * vector bitU * bitU)
  | Stdcx of (vector bitU * vector bitU * vector bitU)
  | Sync of (vector bitU)
  | Eieio
  | Wait of (vector bitU)


type decode_failure = No_matching_pattern | Unsupported_instruction | Illegal_instruction


















let CR = build_cr "CR"

let XER = build_xer "XER"

let FPSCR = build_fpscr "FPSCR"

let VSCR = build_vscr "VSCR"

type regfps = list regfp

type niafps = list niafp







