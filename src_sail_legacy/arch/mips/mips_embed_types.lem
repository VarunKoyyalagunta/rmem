(*Generated by Sail from mips.sail.*)
open import Pervasives_extra
open import Sail_impl_base
open import Sail_values
let PC = Register "PC" 64 63 false []

let nextPC = Register "nextPC" 64 63 false []

let build_CauseReg regname =
  Register regname 32 31 false 
           [("BD", (31 , 31));
            ("CE", (29 , 28));
            ("IV", (23 , 23));
            ("WP", (22 , 22));
            ("IP", (15 , 8));
            ("ExcCode", (6 , 2))]

let build_TLBEntryLoReg regname =
  Register regname 64 63 false 
           [("CapS", (63 , 63));
            ("CapL", (62 , 62));
            ("PFN", (29 , 6));
            ("C", (5 , 3));
            ("D", (2 , 2));
            ("V", (1 , 1));
            ("G", (0 , 0))]

let build_TLBEntryHiReg regname =
  Register regname 64 63 false 
           [("R", (63 , 62)); ("VPN2", (39 , 13)); ("ASID", (7 , 0))]

let build_ContextReg regname =
  Register regname 64 63 false 
           [("PTEBase", (63 , 23)); ("BadVPN2", (22 , 4))]

let build_XContextReg regname =
  Register regname 64 63 false 
           [("PTEBase", (63 , 33)); ("R", (32 , 31)); ("BadVPN2", (30 , 4))]

type TLBIndexT = vector bitU

let build_TLBEntry regname =
  Register regname 117 116 false 
           [("pagemask", (116 , 101));
            ("r", (100 , 99));
            ("vpn2", (98 , 72));
            ("asid", (71 , 64));
            ("g", (63 , 63));
            ("valid", (62 , 62));
            ("caps1", (61 , 61));
            ("capl1", (60 , 60));
            ("pfn1", (59 , 36));
            ("c1", (35 , 33));
            ("d1", (32 , 32));
            ("v1", (31 , 31));
            ("caps0", (30 , 30));
            ("capl0", (29 , 29));
            ("pfn0", (28 , 5));
            ("c0", (4 , 2));
            ("d0", (1 , 1));
            ("v0", (0 , 0))]

let TLBProbe = Register "TLBProbe" 1 0 false []

let TLBPageMask = Register "TLBPageMask" 16 15 false []

let CP0Compare = Register "CP0Compare" 32 31 false []

let CP0EPC = Register "CP0EPC" 64 63 false []

let CP0ErrorEPC = Register "CP0ErrorEPC" 64 63 false []

let CP0LLBit = Register "CP0LLBit" 1 0 false []

let CP0LLAddr = Register "CP0LLAddr" 64 63 false []

let CP0BadVAddr = Register "CP0BadVAddr" 64 63 false []

let CP0Count = Register "CP0Count" 32 31 false []

let CP0HWREna = Register "CP0HWREna" 32 31 false []

let CP0UserLocal = Register "CP0UserLocal" 64 63 false []

let build_StatusReg regname =
  Register regname 32 31 false 
           [("CU", (31 , 28));
            ("BEV", (22 , 22));
            ("IM", (15 , 8));
            ("KX", (7 , 7));
            ("SX", (6 , 6));
            ("UX", (5 , 5));
            ("KSU", (4 , 3));
            ("ERL", (2 , 2));
            ("EXL", (1 , 1));
            ("IE", (0 , 0))]

let branchPending = Register "branchPending" 1 0 false []

let inBranchDelay = Register "inBranchDelay" 1 0 false []

let delayedPC = Register "delayedPC" 64 63 false []

let GPR00 = Register "GPR00" 64 63 false []

let GPR01 = Register "GPR01" 64 63 false []

let GPR02 = Register "GPR02" 64 63 false []

let GPR03 = Register "GPR03" 64 63 false []

let GPR04 = Register "GPR04" 64 63 false []

let GPR05 = Register "GPR05" 64 63 false []

let GPR06 = Register "GPR06" 64 63 false []

let GPR07 = Register "GPR07" 64 63 false []

let GPR08 = Register "GPR08" 64 63 false []

let GPR09 = Register "GPR09" 64 63 false []

let GPR10 = Register "GPR10" 64 63 false []

let GPR11 = Register "GPR11" 64 63 false []

let GPR12 = Register "GPR12" 64 63 false []

let GPR13 = Register "GPR13" 64 63 false []

let GPR14 = Register "GPR14" 64 63 false []

let GPR15 = Register "GPR15" 64 63 false []

let GPR16 = Register "GPR16" 64 63 false []

let GPR17 = Register "GPR17" 64 63 false []

let GPR18 = Register "GPR18" 64 63 false []

let GPR19 = Register "GPR19" 64 63 false []

let GPR20 = Register "GPR20" 64 63 false []

let GPR21 = Register "GPR21" 64 63 false []

let GPR22 = Register "GPR22" 64 63 false []

let GPR23 = Register "GPR23" 64 63 false []

let GPR24 = Register "GPR24" 64 63 false []

let GPR25 = Register "GPR25" 64 63 false []

let GPR26 = Register "GPR26" 64 63 false []

let GPR27 = Register "GPR27" 64 63 false []

let GPR28 = Register "GPR28" 64 63 false []

let GPR29 = Register "GPR29" 64 63 false []

let GPR30 = Register "GPR30" 64 63 false []

let GPR31 = Register "GPR31" 64 63 false []

let HI = Register "HI" 64 63 false []

let LO = Register "LO" 64 63 false []

let UART_WDATA = Register "UART_WDATA" 8 7 false []

let UART_WRITTEN = Register "UART_WRITTEN" 1 0 false []

let UART_RDATA = Register "UART_RDATA" 8 7 false []

let UART_RVALID = Register "UART_RVALID" 1 0 false []

type Exception =
  Int
  | TLBMod
  | TLBL
  | TLBS
  | AdEL
  | AdES
  | Sys
  | Bp
  | ResI
  | CpU
  | Ov
  | Tr
  | C2E
  | C2Trap
  | XTLBRefillL
  | XTLBRefillS
  | XTLBInvL
  | XTLBInvS
  | MCheck


type MemAccessType = Instruction | LoadData | StoreData


type AccessLevel = User | Supervisor | Kernel


type regno = vector bitU

type imm16 = vector bitU

type decode_failure =
  No_matching_pattern | Unsupported_instruction | Illegal_instruction | Internal_error


type Comparison = EQ' | NE | GE | GEU | GT' | LE | LT' | LTU


type WordType = B | H | W | D


















let TLBIndex = Register "TLBIndex" 6 5 false []

let TLBRandom = Register "TLBRandom" 6 5 false []

let TLBEntryLo0 = build_TLBEntryLoReg "TLBEntryLo0"

let TLBEntryLo1 = build_TLBEntryLoReg "TLBEntryLo1"

let TLBContext = build_ContextReg "TLBContext"

let TLBWired = Register "TLBWired" 6 5 false []

let TLBEntryHi = build_TLBEntryHiReg "TLBEntryHi"

let TLBXContext = build_XContextReg "TLBXContext"

let TLBEntry00 = build_TLBEntry "TLBEntry00"

let TLBEntry01 = build_TLBEntry "TLBEntry01"

let TLBEntry02 = build_TLBEntry "TLBEntry02"

let TLBEntry03 = build_TLBEntry "TLBEntry03"

let TLBEntry04 = build_TLBEntry "TLBEntry04"

let TLBEntry05 = build_TLBEntry "TLBEntry05"

let TLBEntry06 = build_TLBEntry "TLBEntry06"

let TLBEntry07 = build_TLBEntry "TLBEntry07"

let TLBEntry08 = build_TLBEntry "TLBEntry08"

let TLBEntry09 = build_TLBEntry "TLBEntry09"

let TLBEntry10 = build_TLBEntry "TLBEntry10"

let TLBEntry11 = build_TLBEntry "TLBEntry11"

let TLBEntry12 = build_TLBEntry "TLBEntry12"

let TLBEntry13 = build_TLBEntry "TLBEntry13"

let TLBEntry14 = build_TLBEntry "TLBEntry14"

let TLBEntry15 = build_TLBEntry "TLBEntry15"

let TLBEntry16 = build_TLBEntry "TLBEntry16"

let TLBEntry17 = build_TLBEntry "TLBEntry17"

let TLBEntry18 = build_TLBEntry "TLBEntry18"

let TLBEntry19 = build_TLBEntry "TLBEntry19"

let TLBEntry20 = build_TLBEntry "TLBEntry20"

let TLBEntry21 = build_TLBEntry "TLBEntry21"

let TLBEntry22 = build_TLBEntry "TLBEntry22"

let TLBEntry23 = build_TLBEntry "TLBEntry23"

let TLBEntry24 = build_TLBEntry "TLBEntry24"

let TLBEntry25 = build_TLBEntry "TLBEntry25"

let TLBEntry26 = build_TLBEntry "TLBEntry26"

let TLBEntry27 = build_TLBEntry "TLBEntry27"

let TLBEntry28 = build_TLBEntry "TLBEntry28"

let TLBEntry29 = build_TLBEntry "TLBEntry29"

let TLBEntry30 = build_TLBEntry "TLBEntry30"

let TLBEntry31 = build_TLBEntry "TLBEntry31"

let TLBEntry32 = build_TLBEntry "TLBEntry32"

let TLBEntry33 = build_TLBEntry "TLBEntry33"

let TLBEntry34 = build_TLBEntry "TLBEntry34"

let TLBEntry35 = build_TLBEntry "TLBEntry35"

let TLBEntry36 = build_TLBEntry "TLBEntry36"

let TLBEntry37 = build_TLBEntry "TLBEntry37"

let TLBEntry38 = build_TLBEntry "TLBEntry38"

let TLBEntry39 = build_TLBEntry "TLBEntry39"

let TLBEntry40 = build_TLBEntry "TLBEntry40"

let TLBEntry41 = build_TLBEntry "TLBEntry41"

let TLBEntry42 = build_TLBEntry "TLBEntry42"

let TLBEntry43 = build_TLBEntry "TLBEntry43"

let TLBEntry44 = build_TLBEntry "TLBEntry44"

let TLBEntry45 = build_TLBEntry "TLBEntry45"

let TLBEntry46 = build_TLBEntry "TLBEntry46"

let TLBEntry47 = build_TLBEntry "TLBEntry47"

let TLBEntry48 = build_TLBEntry "TLBEntry48"

let TLBEntry49 = build_TLBEntry "TLBEntry49"

let TLBEntry50 = build_TLBEntry "TLBEntry50"

let TLBEntry51 = build_TLBEntry "TLBEntry51"

let TLBEntry52 = build_TLBEntry "TLBEntry52"

let TLBEntry53 = build_TLBEntry "TLBEntry53"

let TLBEntry54 = build_TLBEntry "TLBEntry54"

let TLBEntry55 = build_TLBEntry "TLBEntry55"

let TLBEntry56 = build_TLBEntry "TLBEntry56"

let TLBEntry57 = build_TLBEntry "TLBEntry57"

let TLBEntry58 = build_TLBEntry "TLBEntry58"

let TLBEntry59 = build_TLBEntry "TLBEntry59"

let TLBEntry60 = build_TLBEntry "TLBEntry60"

let TLBEntry61 = build_TLBEntry "TLBEntry61"

let TLBEntry62 = build_TLBEntry "TLBEntry62"

let TLBEntry63 = build_TLBEntry "TLBEntry63"

let CP0Cause = build_CauseReg "CP0Cause"

let CP0Status = build_StatusReg "CP0Status"

type regregreg = regno * regno * regno

type regfps = list regfp

type niafps = list niafp



type regregimm16 = regno * regno * imm16





type ast =
  | DADDIU of (regregimm16)
  | DADDU of (regregreg)
  | DADDI of (regregimm16)
  | DADD of (regregreg)
  | ADD of (regregreg)
  | ADDI of (regregimm16)
  | ADDU of (regregreg)
  | ADDIU of (regregimm16)
  | DSUBU of (regregreg)
  | DSUB of (regregreg)
  | SUB of (regregreg)
  | SUBU of (regregreg)
  | AND of (regregreg)
  | ANDI of (regregimm16)
  | OR of (regregreg)
  | ORI of (regregimm16)
  | NOR of (regregreg)
  | XOR of (regregreg)
  | XORI of (regregimm16)
  | LUI of (regno * imm16)
  | DSLL of (regregreg)
  | DSLL32 of (regregreg)
  | DSLLV of (regregreg)
  | DSRA of (regregreg)
  | DSRA32 of (regregreg)
  | DSRAV of (regregreg)
  | DSRL of (regregreg)
  | DSRL32 of (regregreg)
  | DSRLV of (regregreg)
  | SLL of (regregreg)
  | SLLV of (regregreg)
  | SRA of (regregreg)
  | SRAV of (regregreg)
  | SRL of (regregreg)
  | SRLV of (regregreg)
  | SLT of (regregreg)
  | SLTI of (regregimm16)
  | SLTU of (regregreg)
  | SLTIU of (regregimm16)
  | MOVN of (regregreg)
  | MOVZ of (regregreg)
  | MFHI of (regno)
  | MFLO of (regno)
  | MTHI of (regno)
  | MTLO of (regno)
  | MUL of (regregreg)
  | MULT of (regno * regno)
  | MULTU of (regno * regno)
  | DMULT of (regno * regno)
  | DMULTU of (regno * regno)
  | MADD of (regno * regno)
  | MADDU of (regno * regno)
  | MSUB of (regno * regno)
  | MSUBU of (regno * regno)
  | DIV of (regno * regno)
  | DIVU of (regno * regno)
  | DDIV of (regno * regno)
  | DDIVU of (regno * regno)
  | J of (vector bitU)
  | JAL of (vector bitU)
  | JR of (regno)
  | JALR of (regno * regno)
  | BEQ of (regno * regno * imm16 * bitU * bitU)
  | BCMPZ of (regno * imm16 * Comparison * bitU * bitU)
  | SYSCALL_THREAD_START
  | ImplementationDefinedStopFetching
  | SYSCALL
  | BREAK
  | WAIT
  | TRAPREG of (regno * regno * Comparison)
  | TRAPIMM of (regno * imm16 * Comparison)
  | Load of (WordType * bitU * bitU * regno * regno * imm16)
  | Store of (WordType * bitU * regno * regno * imm16)
  | LWL of (regregimm16)
  | LWR of (regregimm16)
  | SWL of (regregimm16)
  | SWR of (regregimm16)
  | LDL of (regregimm16)
  | LDR of (regregimm16)
  | SDL of (regregimm16)
  | SDR of (regregimm16)
  | CACHE of (regregimm16)
  | PREF of (regregimm16)
  | SYNC
  | MFC0 of (regno * regno * vector bitU * bitU)
  | HCF
  | MTC0 of (regno * regno * vector bitU * bitU)
  | TLBWI
  | TLBWR
  | TLBR
  | TLBP
  | RDHWR of (regno * regno)
  | ERET


