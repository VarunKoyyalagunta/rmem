type mipsRTypeOp = 
| MIPSROpADD
| MIPSROpADDU
| MIPSROpAND
| MIPSROpDADD
| MIPSROpDADDU
| MIPSROpDSUB
| MIPSROpDSUBU
| MIPSROpMOVN
| MIPSROpMOVZ
| MIPSROpMUL
| MIPSROpNOR
| MIPSROpOR
| MIPSROpSLT
| MIPSROpSLTU
| MIPSROpSUB
| MIPSROpSUBU
| MIPSROpXOR

let pp_rtype_op = function
| MIPSROpADD    -> "add"  
| MIPSROpADDU   -> "addu"
| MIPSROpAND    -> "and"  
| MIPSROpDADD   -> "dadd"
| MIPSROpDADDU  -> "daddu"
| MIPSROpDSUB   -> "dsub"
| MIPSROpDSUBU  -> "dsubu"
| MIPSROpMOVN   -> "movn"
| MIPSROpMOVZ   -> "movz"
| MIPSROpMUL    -> "mul"  
| MIPSROpNOR    -> "nor"  
| MIPSROpOR     -> "or"   
| MIPSROpSLT    -> "slt"  
| MIPSROpSLTU   -> "sltu"
| MIPSROpSUB    -> "sub"  
| MIPSROpSUBU   -> "subu"
| MIPSROpXOR    -> "xor"  

type bit26 = int
type bit16 = int
type bit5  = int

type mipsITypeOp = 
| MIPSIOpADDI
| MIPSIOpADDIU
| MIPSIOpANDI
| MIPSIOpDADDI
| MIPSIOpDADDIU
| MIPSIOpORI
| MIPSIOpSLTI
| MIPSIOpSLTIU
| MIPSIOpXORI

let pp_itype_op = function
| MIPSIOpADDI   -> "addi"
| MIPSIOpADDIU  -> "addiu"
| MIPSIOpANDI   -> "andi"
| MIPSIOpDADDI  -> "daddi"
| MIPSIOpDADDIU -> "daddiu"
| MIPSIOpORI    -> "ori"
| MIPSIOpSLTI   -> "slti"
| MIPSIOpSLTIU  -> "sltiu"
| MIPSIOpXORI   -> "xori"

type mipsShiftIOp = 
| MIPSDSLL
| MIPSDSLL32
| MIPSDSRA
| MIPSDSRA32
| MIPSDSRL
| MIPSDSRL32
| MIPSSLL
| MIPSSRA
| MIPSSRL

let pp_shifti_op = function
| MIPSDSLL   -> "dsll" 
| MIPSDSLL32 -> "dsll32"
| MIPSDSRA   -> "dsra"  
| MIPSDSRA32 -> "dsra32"
| MIPSDSRL   -> "dsrl"  
| MIPSDSRL32 -> "dsrl32"
| MIPSSLL    -> "sll"   
| MIPSSRA    -> "sra"   
| MIPSSRL    -> "srl"   

type mipsShiftVOp = 
| MIPSDSLLV
| MIPSDSRAV
| MIPSDSRLV
| MIPSSLLV
| MIPSSRAV
| MIPSSRLV

let pp_shiftv_op = function
| MIPSDSLLV -> "dsllv"
| MIPSDSRAV -> "dsrav"
| MIPSDSRLV -> "dsrlv"
| MIPSSLLV  -> "sllv" 
| MIPSSRAV  -> "srav" 
| MIPSSRLV  -> "srlv" 

type mipsMulDivOp =
| MIPSDDIV
| MIPSDDIVU
| MIPSDIV
| MIPSDIVU
| MIPSDMULT
| MIPSDMULTU
| MIPSMADD
| MIPSMADDU
| MIPSMSUB
| MIPSMSUBU
| MIPSMULT
| MIPSMULTU

let pp_muldiv_op = function
| MIPSDDIV   -> "ddiv"  
| MIPSDDIVU  -> "ddivu" 
| MIPSDIV    -> "div"   
| MIPSDIVU   -> "divu"  
| MIPSDMULT  -> "dmult" 
| MIPSDMULTU -> "dmultu"
| MIPSMADD   -> "madd"  
| MIPSMADDU  -> "maddu" 
| MIPSMSUB   -> "msub"  
| MIPSMSUBU  -> "msubu" 
| MIPSMULT   -> "mult"  
| MIPSMULTU  -> "multu" 

type mipsMFHiLoOp =
| MIPSMFHI
| MIPSMFLO
| MIPSMTHI
| MIPSMTLO

let pp_mfhilo_op = function
| MIPSMFHI -> "mfhi"
| MIPSMFLO -> "mflo"
| MIPSMTHI -> "mthi"
| MIPSMTLO -> "mtlo"

type mipsWordWidth = 
| MIPSByte
| MIPSHalf
| MIPSWord
| MIPSDouble

type mipsCmp =
| MIPS_EQ  (* equal *)
| MIPS_NE  (* not equal *)
| MIPS_GE  (* signed greater than or equal *)
| MIPS_GEU (* unsigned greater than or equal *) 
| MIPS_GT  (* signed strictly greater than *) 
| MIPS_LE  (* signed less than or equal *) 
| MIPS_LT  (* signed strictly less than *) 
| MIPS_LTU (* unsigned less than or qual *) 

let pp_load_op width signed linked = match (width, signed, linked) with
  | (MIPSByte, true, false)    -> "lb"
  | (MIPSByte, false, false)   -> "lbu"
  | (MIPSHalf, true, false)    -> "lh"
  | (MIPSHalf, false, false)   -> "lhu"
  | (MIPSWord, true, false)    -> "lw"
  | (MIPSWord, false, false)   -> "lwu"
  | (MIPSDouble, false, false) -> "ld"
  | (MIPSWord, true, true)     -> "ll"
  | (MIPSDouble, false, true)  -> "lld"
  | _                          -> failwith "unexpected load op"

let pp_store_op width conditional = match (width, conditional) with
  | (MIPSByte,   false) -> "sb"
  | (MIPSHalf,   false) -> "sh"
  | (MIPSWord,   false) -> "sw"
  | (MIPSDouble, false) -> "sd"
  | (MIPSWord,   true)  -> "sc"
  | (MIPSDouble, true)  -> "scd"
  | _                   -> failwith "unexpected store op"

let pp_lslr_op store double left = match (store, double, left) with
  | (false, false, true ) -> "lwl"
  | (false, false, false) -> "lwr"
  | (false, true , true ) -> "ldl"
  | (false, true , false) -> "ldr"
  | (true , false, true ) -> "swl"
  | (true , false, false) -> "swr"
  | (true , true , true ) -> "sdl"
  | (true , true , false) -> "sdr"

let pp_beq_op ne likely = match (ne, likely) with
  | (false, false) -> "beq"
  | (false, true)  -> "beql"
  | (true , false) -> "bne"
  | (true , true)  -> "bnel"

let pp_bcmpz_op cmp link likely = match (cmp, likely, link) with
| (MIPS_LT, false , false ) -> "bltz"
| (MIPS_LT, false , true  ) -> "bltzal"
| (MIPS_LT, true  , false ) -> "bltzl"
| (MIPS_LT, true  , true  ) -> "bltzall"
| (MIPS_GE, false , false ) -> "bgez"
| (MIPS_GE, false , true  ) -> "bgezal"
| (MIPS_GE, true  , false ) -> "bgezl"
| (MIPS_GE, true  , true  ) -> "bgezall"
| (MIPS_GT, false , false ) -> "bgtz"
| (MIPS_GT, true  , false ) -> "bgtzl"
| (MIPS_LE, false , false ) -> "blez"
| (MIPS_LE, true  , false ) -> "blezl"
| _ -> failwith "unknown bcmpz instruction"
