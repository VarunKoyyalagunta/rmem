type token_RTYPE = {txt : string; op : mipsRTypeOp }
type token_ITYPE = {txt : string; op : mipsITypeOp }
type token_ShiftI = {txt : string; op : mipsShiftIOp }
type token_ShiftV = {txt : string; op : mipsShiftVOp }
type token_MulDiv = {txt : string; op : mipsMulDivOp }
type token_MFHiLo = {txt : string; op : mipsMFHiLoOp }
type token_LUI    = {txt : string }
type token_Load   = {txt : string; width: mipsWordWidth; signed : bool; linked : bool}
type token_Store  = {txt : string; width: mipsWordWidth; conditional : bool}
type token_LSLR   = {txt : string; store : bool; double : bool; left: bool } (* Load/Store Left/Right *)
type token_SYNC   = {txt : string}
type token_BEQ    = {txt : string; ne : bool; likely : bool }
type token_BCMPZ  = {txt : string; cmp : mipsCmp; likely : bool; link : bool }
type token_J      = {txt : string}
type token_JAL    = {txt : string}
type token_JR     = {txt : string}
type token_JALR   = {txt : string}
(*
(regno, imm16, Comparison) TRAPIMM

(regno, regno) RDHWR
(regno, regno, Comparison) TRAPREG
(regno, regno, bit[3], bool) MFC0
(regno, regno, bit[3], bool) MTC0
(regno, regno, imm16, bool, bool) BEQ
TLBP
TLBR
TLBWI
TLBWR

regregimm16 CACHE
regregimm16 PREF

unit BREAK
unit ERET
unit HCF
unit SYSCALL
unit WAIT
*)