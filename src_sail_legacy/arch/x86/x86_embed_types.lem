(*Generated by Sail from x86.sail.*)
open import Pervasives_extra
open import Sail_impl_base
open import Sail_values
















type byte = vector bitU

type qword = vector bitU

type regn = integer

let CF = Register "cf" 1 0 false []

let PF = Register "pf" 1 0 false []

let AF = Register "af" 1 0 false []

let ZF = Register "zf" 1 0 false []

let SF = Register "sf" 1 0 false []

let OF = Register "of" 1 0 false []

type wsize = | Sz8 of (bitU) | Sz16 | Sz32 | Sz64


type monop_name = X86_Dec | X86_Inc | X86_Not | X86_Neg


type binop_name =
  X86_Add
  | X86_Or
  | X86_Adc
  | X86_Sbb
  | X86_And
  | X86_Sub
  | X86_Xor
  | X86_Cmp
  | X86_Rol
  | X86_Ror
  | X86_Rcl
  | X86_Rcr
  | X86_Shl
  | X86_Shr
  | X86_Test
  | X86_Sar


type bitop_name = Bts | Btc | Btr


type cond =
  X86_O
  | X86_NO
  | X86_B
  | X86_NB
  | X86_E
  | X86_NE
  | X86_NA
  | X86_A
  | X86_S
  | X86_NS
  | X86_P
  | X86_NP
  | X86_L
  | X86_NL
  | X86_NG
  | X86_G
  | X86_ALWAYS


type regfps = list regfp

type niafps = list niafp



type byte_stream = list byte

type ostream = maybe byte_stream

let RIP = Register "rip" 64 63 false []

let RAX = Register "rax" 64 63 false []

let RCX = Register "rcx" 64 63 false []

let RDX = Register "rdx" 64 63 false []

let RBX = Register "rbx" 64 63 false []

let RSP = Register "rsp" 64 63 false []

let RBP = Register "rbp" 64 63 false []

let RSI = Register "rsi" 64 63 false []

let RDI = Register "rdi" 64 63 false []

let R8 = Register "r8" 64 63 false []

let R9 = Register "r9" 64 63 false []

let R10 = Register "r10" 64 63 false []

let R11 = Register "r11" 64 63 false []

let R12 = Register "r12" 64 63 false []

let R13 = Register "r13" 64 63 false []

let R14 = Register "r14" 64 63 false []

let R15 = Register "r15" 64 63 false []

type base = | NoBase | RipBase | RegBase of (regn)


type scale_index = vector bitU * regn



type ea = | Ea_i of (wsize * qword) | Ea_r of (wsize * regn) | Ea_m of (wsize * qword)


type rm = | X86_Reg of (regn) | Mem of (maybe scale_index * base * qword)


type imm_rm = | Rm of (rm) | Imm of (qword)


type dest_src = | Rm_i of (rm * qword) | Rm_r of (rm * regn) | R_rm of (regn * rm)


type bit_offset = | Bit_rm_imm of (rm * qword) | Bit_rm_r of (rm * regn)




type ast =
  | Binop of (bitU * binop_name * wsize * dest_src)
  | Bitop of (bitU * bitop_name * wsize * bit_offset)
  | CALL of (imm_rm)
  | CLC
  | CMC
  | CMPXCHG of (bitU * wsize * rm * regn)
  | X86_DIV of (wsize * rm)
  | HLT
  | Jcc of (cond * qword)
  | JMP of (rm)
  | LEA of (wsize * dest_src)
  | LEAVE
  | LOOP of (cond * qword)
  | MFENCE
  | Monop of (bitU * monop_name * wsize * rm)
  | MOV of (cond * wsize * dest_src)
  | MOVSX of (wsize * dest_src * wsize)
  | MOVZX of (wsize * dest_src * wsize)
  | X86_MUL of (wsize * rm)
  | X86_NOP of (ii)
  | POP of (rm)
  | PUSH of (imm_rm)
  | RET of (qword)
  | SET of (cond * bitU * rm)
  | STC
  | XADD of (bitU * wsize * rm * regn)
  | XCHG of (bitU * wsize * rm * regn)


