(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Robert Norton-Wright, University of Cambridge 2017                 *)
(*  Copyright Shaked Flur, University of Cambridge          2017                 *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

open String
open Big_int
open X86HGenBase


open Sail_impl_base

type instruction = X86HGenBase.instruction
type instruction_ast = X86_embed_types.ast

type labelmap = (string * int) list

module IInt = Sail_impl_base

open X86_embed_types
(* #include "gen_files/x86/herdtools_types_to_shallow_types.hgen" *)
    
let herdtools_ast_to_shallow_ast (instr : instruction) =
  let instr = match instr with
  (* #include "gen_files/x86/herdtools_ast_to_shallow_ast.hgen" *)
  | i ->
      begin
        Printf.eprintf "Cannot translate %s\n" (dump_instruction i);
        failwith "Translation failure"
      end
  in
  instr

(* sneakily reuse map.hgen to find Sym address we need to resolve syms *)
let unsym_ins lookup_loc =
  let map_reg reg = reg in
  let map_rm rm =
    match rm with
    | Sym s -> let addr = lookup_loc s in X86HGenBase.Mem (None, X86HGenBase.NoBase, Nat_big_num.of_int addr)
    | _     -> rm
  in
  let map_dest_src ds =
    match ds with
    | X86HGenBase.R_rm (r, rm) -> X86HGenBase.R_rm (map_reg r, map_rm rm)
    | X86HGenBase.Rm_i (rm, i) -> X86HGenBase.Rm_i (map_rm rm, i)
    | X86HGenBase.Rm_r (rm, r) -> X86HGenBase.Rm_r (map_rm rm, map_reg r)
  in
  let map_imm_rm irm =
    match irm with
    | X86HGenBase.Imm i -> irm
    | X86HGenBase.Rm rm -> X86HGenBase.Rm (map_rm rm)
  in
  let map_bit_offset bo =
    match bo with
    | X86HGenBase.Bit_rm_imm (rm, imm) -> X86HGenBase.Bit_rm_imm (map_rm rm, imm)
    | X86HGenBase.Bit_rm_r (rm, r)     -> X86HGenBase.Bit_rm_r (map_rm rm, map_reg r)
  in
  fun ins ->
    match ins with
    (* #include "gen_files/x86/map.hgen" *)
    | _ -> ins

let unlabelize_ins lookup_loc label_map i ins =
  begin match ins with
  | `X86JCCLABEL (c, label) ->
     let offset = (List.assoc label label_map - i) in
     `X86JCC (c, Nat_big_num.of_int offset)
  | ins -> unsym_ins lookup_loc ins
  end

let end_ins = `X86StopFetching


(* #include "gen_files/x86/shallow_types_to_herdtools_types.hgen" *)

let trans_out_int fbits =
  Nat_big_num.to_int (Sail_values.unsigned fbits)

let trans_out_reg flv =
  let n = trans_out_int flv in
  match n with
  | 0 -> RAX
  | 1 -> RCX
  | 2 -> RDX
  | 3 -> RBX
  | 4 -> RSP
  | 5 -> RBP
  | 6 -> RSI
  | 7 -> RDI
  | 8 -> R8
  | 9 -> R9
  | 10 -> R10
  | 11 -> R11
  | 12 -> R12
  | 13 -> R13
  | 14 -> R14
  | 15 -> R15
  | _  -> failwith "trans_out_reg number not 0 to 31"
 

let shallow_ast_to_herdtools_ast instr : instruction =
  let open X86_embed_types in
  begin match instr with
    (* #include "gen_files/x86/shallow_ast_to_herdtools_ast.hgen" *)
    (*| i -> failwith "cannot translate instruction"*)
  end



let trans_out_int ( _fname, _fsize, fbits ) =
  Nat_big_num.to_int (IInt.integer_of_bit_list fbits)

let trans_out_reg flv =
  let n = trans_out_int flv in
  match n with
  | 0 -> RAX
  | 1 -> RCX
  | 2 -> RDX
  | 3 -> RBX
  | 4 -> RSP
  | 5 -> RBP
  | 6 -> RSI
  | 7 -> RDI
  | 8 -> R8
  | 9 -> R9
  | 10 -> R10
  | 11 -> R11
  | 12 -> R12
  | 13 -> R13
  | 14 -> R14
  | 15 -> R15
  | _  -> failwith "trans_out_reg number not 0 to 15"


(* sneakily reuse map.hgen to find Sym address we need to resolve syms *)
let sym_ins lookup_symbol =
  let map_reg reg = reg in
  let map_rm rm =
    match rm with
    | X86HGenBase.Mem (None, X86HGenBase.NoBase, addr) ->
      let addr = Sail_impl_base.address_of_integer addr in
      begin match lookup_symbol addr with
      | None -> rm
      | Some s -> X86HGenBase.Sym s
      end
    | _     -> rm
  in
  let map_dest_src ds =
    match ds with
    | X86HGenBase.R_rm (r, rm) -> X86HGenBase.R_rm (map_reg r, map_rm rm)
    | X86HGenBase.Rm_i (rm, i) -> X86HGenBase.Rm_i (map_rm rm, i)
    | X86HGenBase.Rm_r (rm, r) -> X86HGenBase.Rm_r (map_rm rm, map_reg r)
  in
  let map_imm_rm irm =
    match irm with
    | X86HGenBase.Imm i -> irm
    | X86HGenBase.Rm rm -> X86HGenBase.Rm (map_rm rm)
  in
  let map_bit_offset bo =
    match bo with
    | X86HGenBase.Bit_rm_imm (rm, imm) -> X86HGenBase.Bit_rm_imm (map_rm rm, imm)
    | X86HGenBase.Bit_rm_r (rm, r)     -> X86HGenBase.Bit_rm_r (map_rm rm, map_reg r)
  in
  fun ins ->
    match ins with
    (* #include "gen_files/x86/map.hgen" *)
    | _ -> ins

    
let labelize_ins
    (lookup_symbol: address -> string option)
    (program_loc: address)
    ins
  =

  let label offset =
    let addr = Sail_impl_base.add_address_nat program_loc offset in
    lookup_symbol addr
  in

  begin match ins with
  | `X86JCC (c, imm) ->
     begin match label (Nat_big_num.to_int imm) with 
     | None -> ins
     | Some l -> `X86JCCLABEL (c, l)
     end
  | _ -> sym_ins lookup_symbol ins
  end
