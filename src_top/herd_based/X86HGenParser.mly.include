/**************************************************************************/
/*                                  DIY                                   */
/*                                                                        */
/* Jade Alglave, Luc Maranget, INRIA Paris-Rocquencourt, France.          */
/* Shaked Flur, Susmit Sarkar, Peter Sewell, University of Cambridge, UK. */
/*                                                                        */
/*  Copyright 2015 Institut National de Recherche en Informatique et en   */
/*  Automatique and the authors. All rights reserved.                     */
/*  This file is distributed  under the terms of the Lesser GNU General   */
/*  Public License.                                                       */
/**************************************************************************/

%{
module X86 = X86HGenBase
open X86
%}

%token EOF
%token RIP

%token <X86HGenBase.token_BHREG> ARCH_BHREG
%token <X86HGenBase.reg> ARCH_WREG
%token <X86HGenBase.reg> ARCH_LREG
%token <X86HGenBase.reg> ARCH_QREG
%token <X86HGenBase.reg> SYMB_BREG
%token <X86HGenBase.reg> SYMB_HREG
%token <X86HGenBase.reg> SYMB_WREG
%token <X86HGenBase.reg> SYMB_LREG
%token <X86HGenBase.reg> SYMB_QREG

%token <int> NUM
%token <Nat_big_num.num> BIG_NUM

%token <string> NAME
%token <int> PROC

%token SEMI DOLLAR COMMA LPAR RPAR PIPE COLON PLUS LOCK

/* #include "build_isa_models/x86/gen/tokens.hgen" */

%type <int list * (X86HGenBase.parsedPseudo) list list * MiscParser.extra_data> main
%start  main

%nonassoc SEMI
%%

main:
| semi_opt proc_list iol_list EOF { $2,$3,MiscParser.NoExtra }

semi_opt:
| { () }
| SEMI { () }

proc_list:
| PROC SEMI {[$1]}
| PROC PIPE proc_list { $1::$3 }

iol_list :
| instr_option_list SEMI {[$1]}
| instr_option_list SEMI iol_list {$1::$3}

instr_option_list :
| instr_option {[$1]}
| instr_option PIPE instr_option_list {$1::$3}

instr_option :
|            { Nop }
| NAME COLON instr_option { Label ($1,$3) }
| instr      { Instruction $1 }

instr:
/* Generated fixed-point instructions */
/* #include "build_isa_models/x86/gen/parser.hgen" */
/* TODO: add the label version of instructions here */
| JCC NAME
   { `X86JCCLABEL ($1.cond, $2) }

breg:
| ARCH_BHREG { $1 }

wreg:
| ARCH_WREG { $1 }
| SYMB_WREG { $1 }

lreg:
| ARCH_LREG { $1 }
| SYMB_LREG { $1 }

qreg:
| ARCH_QREG { $1 }
| SYMB_QREG { $1 }

num:
| NUM { $1 }

big_num:
| num { Nat_big_num.of_int $1 }
| BIG_NUM { $1 }

imm:
| DOLLAR num { $2 }

big_imm:
| imm { Nat_big_num.of_int $1 }
| DOLLAR big_num { $2 }

addr:
| big_num LPAR RIP RPAR
   { Mem (None, RipBase, $1) }
| big_num LPAR qreg COMMA qreg COMMA num RPAR
   { check_scale $7
   ; Mem (Some ($7, $5), RegBase $3, $1)
   }
| big_num LPAR COMMA qreg COMMA num RPAR
   { check_scale $6
   ; Mem (Some ($6, $4), NoBase, $1)
   }
| big_num LPAR qreg RPAR
   { Mem (None, RegBase $3, $1) }
| LPAR RIP RPAR
   { Mem (None, RipBase, bit64_of_int 0) }
| LPAR qreg COMMA qreg COMMA num RPAR
   { check_scale $6
   ; Mem (Some ($6, $4), RegBase $2, bit64_of_int 0)
   }
| LPAR COMMA qreg COMMA num RPAR
   { check_scale $5
   ; Mem (Some ($5, $3), NoBase, bit64_of_int 0)
   }
| LPAR qreg RPAR
   { Mem (None, RegBase $2, bit64_of_int 0) }
| LPAR NAME RPAR
   { Sym ($2) }
| big_num
   { Mem (None, NoBase, $1) }
