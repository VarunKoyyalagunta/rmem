/**************************************************************************/
/*                                  DIY                                   */
/*                                                                        */
/* Jade Alglave, Luc Maranget, INRIA Paris-Rocquencourt, France.          */
/* Shaked Flur, Susmit Sarkar, Peter Sewell, University of Cambridge, UK. */
/*                                                                        */
/*  Copyright 2015 Institut National de Recherche en Informatique et en   */
/*  Automatique and the authors. All rights reserved.                     */
/*  This file is distributed  under the terms of the Lesser GNU General   */
/*  Public License.                                                       */
/**************************************************************************/

%{
module RISCV = RISCVHGenBase
open RISCV

let rec is_lt_pow2 n k =
  if k = 0 then (n <= 0)
  else is_lt_pow2 (n/2) (k-1)

let iskbituimm k imm = 0 <= imm && (is_lt_pow2 imm k)
let iskbitsimm k imm = (is_lt_pow2 ((-imm)-1) (k-1)) && (is_lt_pow2 imm (k-1))

%}

%token EOF

%token <RISCVHGenBase.reg> ARCH_REG
%token <RISCVHGenBase.reg> SYMB_REG

%token <int> NUM
%token <Nat_big_num.num> BIG_NUM

%token <string> NAME
%token <int> PROC

%token SEMI COMMA PIPE COLON LPAR RPAR
/* #include "gen_files/riscv/tokens.hgen" */

%type <int list * (RISCVHGenBase.parsedPseudo) list list * MiscParser.extra_data> main
%start  main

%nonassoc SEMI
%%

main:
| semi_opt proc_list iol_list EOF { $2,$3,MiscParser.NoExtra }

semi_opt:
| { () }
| SEMI { () }

proc_list:
| PROC SEMI {[$1]}
| PROC PIPE proc_list { $1::$3 }

iol_list :
| instr_option_list SEMI {[$1]}
| instr_option_list SEMI iol_list {$1::$3}

instr_option_list :
| instr_option {[$1]}
| instr_option PIPE instr_option_list {$1::$3}

instr_option :
|            { Nop }
| NAME COLON instr_option { Label ($1,$3) }
| instr      { Instruction $1 }

instr:
/* Generated fixed-point instructions */
/* #include "gen_files/riscv/parser.hgen" */
| JAL reg COMMA NAME
  { `RISCVJALLabel($4, $2) }
| BTYPE reg COMMA reg COMMA NAME
  { `RISCVBTypeLabel($6, $4, $2, $1.op) }

reg:
| ARCH_REG { $1 }
| SYMB_REG { $1 }

imm:
| NUM { $1 }

big_imm:
| imm { Nat_big_num.of_int $1 }
| BIG_NUM { $1 }
