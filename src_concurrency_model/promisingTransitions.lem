open import Pervasives
open import Sail_impl_base
open import ExceptionTypes
open import Isa
open import InstructionSemantics
open import Fragments
open import PromisingViews
open import Params
open import Events
open import Utils
open import Assert_extra
open ListMonad


(* type tss_start_regs = register_value * maybe register_value
 * type tss_request 'v = (w_eiid * tss_start_regs * 'v) *)


type writedata 'v = 
  <| wd_w : write; 
     wd_rexinfo : maybe (w_eiid * address); 
     wd_req_view : 'v;
     wd_is_thread_start : bool |>   
(* thread starts are modelled as promised writes with tsi_addr 
   as memory value *)


let show_writedata wd = 
  "<| wd_w = " ^ show wd.wd_w ^ ", " ^
     "wd_rexinfo = " ^ show wd.wd_rexinfo ^ ", " ^
     "wd_req_view = " ^ show wd.wd_req_view ^ ", " ^
     "wd_is_thread_start = " ^ show wd.wd_is_thread_start ^ "|>"

instance forall 'a. Show 'a => (Show (writedata 'a))
  let show = show_writedata
end


type shared = Shared | NonShared
type promised = Promise | NonPromise

let show_shared = function
  | Shared -> "Shared"
  | NonShared -> "NonShared"
end

instance (Show (shared))
  let show = show_shared
end

let show_promised = function
  | Promise -> "Promise"
  | NonPromise -> "NonPromise"
end

instance (Show (promised))
  let show = show_promised
end



(* abstracts from the storage subsystem *)
type pss_sem 'pss 'v = 
  <| handle_write :
       'pss ->
       writedata 'v -> shared ->
       list ('v * 'pss * maybe thread_id);

     handle_fulfil : 
       'pss ->
       writedata 'v ->
       list ('v * maybe thread_id);

     handle_read :
       'pss ->
       read_request -> 'v -> shared ->
       list (write * 'v);

     pss_view :
       'pss -> 'v;

     merge_pss_states :
       'pss -> 'pss -> 'pss;

     (* handle_thread_start_write :
      *   'pss ->
      *   tss_request 'v ->
      *   list (maybe thread_id * 'pss);
      * 
      * handle_thread_start_fulfil : 
      *   'pss -> 
      *   tss_request 'v ->
      *   list (maybe thread_id); *)

     handle_can_thread_start :
       'pss ->
       thread_id ->
       list (memory_value * 'v)

  |>


type pt_trans 'i 'ts 'ss 'v = 
  (* thread sync transitions *)
  | PT_Write of 
      (thread_id * ioid) * 
      (writedata 'v * promised * shared) * 
      ('v * maybe thread_id) *
      ('ts * 'ss)
  | PT_Fulfil of 
      (thread_id * ioid) * 
      (writedata 'v) * 
      ('v * maybe thread_id) *
      'ts
  | PT_Read of 
      (thread_id * ioid) * 
      (read_request * 'v) * 
      (write * 'v) * 
      'ts (* second view is view of write read *)
  (* thread only transitions *)
  | PT_finish of 
      (thread_id * ioid) * 
      (address * 'i) * 
      'ts
  | PT_failed_store_excl of 
      (thread_id * ioid) * 
      'ts
  | PT_exception of 
      (thread_id * ioid) * 
      exception_type 'i * 
      'ts



let show_pt_trans = function
  | PT_Write ids (wd,pr,sh) t _ ->
     "PT_Write " ^ show ids ^ " (, " ^ show wd ^ ", " ^
       show pr ^ ", " ^ show sh ^" ) " ^ show t
  | PT_Fulfil ids req t _ ->
     "PT_Fulfil " ^ show ids ^ " " ^ show req ^ " " ^ show t
  | PT_Read ids req repl _ ->
     "PT_Read " ^ show ids ^ " " ^ show req ^ " " ^ show repl
  | PT_finish ids _ _ ->
     "PT_finish " ^ show ids
  | PT_failed_store_excl ids _ ->
     "PT_failed_store_excl " ^ show ids
  | PT_exception ids e _ ->
     "PT_failed_store_excl " ^ show ids ^ " " ^ show e
end

instance forall 'i 'v 'ts 'ss. Show 'v => (Show (pt_trans 'i 'ts 'ss 'v))
  let show = show_pt_trans
end


type pt_follow_label 'i 'v = pt_trans 'i unit unit 'v
type pt_follow_trace 'i 'v = list (pt_follow_label 'i 'v)

let pt_follow_label_of_pt_trans (t : pt_trans 'i 'ts 'ss 'v) : pt_follow_label 'i 'v = 
  match t with
  | PT_Write ids req repl _ -> PT_Write ids req repl ((),())
  | PT_Fulfil ids req repl _ -> PT_Fulfil ids req repl ()
  | PT_Read ids req repl _ -> PT_Read ids req repl ()
  | PT_finish ids req _ -> PT_finish ids req ()
  | PT_failed_store_excl ids _ -> PT_failed_store_excl ids ()
  | PT_exception ids descr _ts -> PT_exception ids descr ()
  end

let pt_trans_matches_pt_follow_label follow_label t =
  follow_label = pt_follow_label_of_pt_trans t



(* thread transitions which involve interaction with the storage
   subsystem *)
type p_trans 'i 'ts 'ss 'v =
  | PT of pt_trans 'i 'ts 'ss 'v
  | PSys_stop_promising
  | PSys_finish of (map thread_id 'ts) * 'ss * pt_follow_trace 'i 'v


let ids_of_pt_trans = function
  | PT_Write ids _ _ _         -> ids
  | PT_Fulfil ids _ _ _        -> ids
  | PT_Read ids _ _ _          -> ids
  | PT_finish ids _ _          -> ids
  | PT_failed_store_excl ids _ -> ids
  | PT_exception ids _ _       -> ids
end

let tid_of_pt_trans t = fst (ids_of_pt_trans t)
let ioid_of_pt_trans t = snd (ids_of_pt_trans t)

let tid_of_p_trans = function
  | PT t -> Just (tid_of_pt_trans t)
  | _ -> Nothing
end
let ioid_of_p_trans = function
  | PT t -> Just (ioid_of_pt_trans t)
  | _ -> Nothing
end


let p_is_storage_transition (_ : p_trans 'i 'ts 'ss 'v) = false
let p_is_thread_transition = function
  | PT _ -> true
  | _ -> false
end

let write_information_of_pt_write_trans = function
  | PT_Write _ winfo _ _ -> return winfo
  | _ -> mzero
end

let write_information_of_p_write_trans = function
  | PT t -> write_information_of_pt_write_trans t
  | _ -> mzero
end

let wd_of_pt_write_trans t =
  write_information_of_pt_write_trans t >>= fun (wd,_,_) ->
  return wd
let wd_of_p_write_trans t =
  write_information_of_p_write_trans t >>= fun (wd,_,_) ->
  return wd

let wd_of_shared_p_write_trans t =
  write_information_of_p_write_trans t >>= fun (wd,_,sh) ->
  guard (sh = Shared) >>
  return wd

let wd_of_shared_pt_write_trans t =
  write_information_of_pt_write_trans t >>= fun (wd,_,sh) ->
  guard (sh = Shared) >>
  return wd

let unlockA_of_wd wd = option_guard wd.wd_rexinfo

let is_shared_pt_write_trans (t : pt_trans 'i 'ts 'ss 'v) : bool =
  not (List.null (wd_of_shared_pt_write_trans t))
let is_shared_p_write_trans (t : p_trans 'i 'ts 'ss 'v) : bool =
  not (List.null (wd_of_shared_p_write_trans t))

let is_pt_write_trans (t : pt_trans 'i 'ts 'ss 'v) : bool =
  not (List.null (wd_of_pt_write_trans t))
let is_p_write_trans (t : p_trans 'i 'ts 'ss 'v) : bool =
  not (List.null (wd_of_p_write_trans t))

let is_stop_promising_p_trans : p_trans 'i 'ts 'ss 'v -> bool = function
  | PSys_stop_promising -> true
  | _ -> false
end


let p_trans_fetch_address : p_trans 'i 'ts 'ss 'v -> maybe address = function
  | _ -> Nothing
  end

let read_footprint_of_pt_trans (t: pt_trans 'i 'ts 'ss 'v) : maybe footprint =
  match t with
  | PT_Read _ (rr,_) _ _ -> Just rr.r_addr
  | _ -> Nothing
  end
let read_footprint_of_p_trans (t: p_trans 'i 'ts 'ss 'v) : maybe footprint =
  match t with
  | PT t -> read_footprint_of_pt_trans t
  | _ -> Nothing
  end

let ptrans_reads_footprint
    (footprint:  footprint)
    (transition: p_trans 'i 'ts 'ss 't)
    : bool
  =
  read_footprint_of_p_trans transition
  $> Maybe.map (non_empty_intersection footprint)
  $> fromMaybe false



(* NOTE: write_footprints_of_trans is (also) used to determine if the
transition can be taken eagerly when eager_local_mem is enabled *)
let write_footprints_of_pt_trans (t: pt_trans 'i 'ts 'ss 'v) : list footprint =
  List.map (fun wd -> wd.wd_w.w_addr) (wd_of_pt_write_trans t)
let write_footprints_of_p_trans (t: p_trans 'i 'ts 'ss 'v) : list footprint =
  List.map (fun wd -> wd.wd_w.w_addr) (wd_of_p_write_trans t)

let ptrans_writes_footprint
    (footprint:  footprint)
    (transition: p_trans 'i 'ts 'ss 'v)
    : bool
  =
  exists (fp MEM (write_footprints_of_p_trans transition)).
      non_empty_intersection footprint fp




  


let tconf_after_pt_trans (pts,pss) : 
      pt_trans 'i 'pts 'pss 'v -> ('pts * 'pss) = 
  function
  (* thread sync transitions *)
  | PT_Write _ _ _ (pts,pss)    -> (pts,pss)
  | PT_Fulfil _ _ _ pts         -> (pts,pss)
  | PT_Read _ _ _ pts           -> (pts,pss)
  (* thread only transitions *)
  | PT_finish _ _ pts           -> (pts,pss)
  | PT_failed_store_excl _ pts  -> (pts,pss)
  | PT_exception _ _ pts        -> (pts,pss)
end

