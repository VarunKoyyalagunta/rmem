open import Pervasives_extra
open import Sail2_instr_kinds
open import Sail2_values
open import Sail2_string
open import Sail2_operators_mwords
open import Sail2_prompt_monad
open import Sail2_prompt


type bits 'n = mword 'n

type regfp  =
  | RFull of (string)
  | RSlice of ((string * ii * ii))
  | RSliceBit of ((string * ii))
  | RField of ((string * string))



type regfps  = list regfp

type niafp  =
  | NIAFP_successor of (unit)
  | NIAFP_concrete_address of (bits ty64)
  | NIAFP_indirect_address of (unit)



type niafps  = list niafp

type diafp  = | DIAFP_none of (unit) | DIAFP_concrete of (bits ty64) | DIAFP_reg of (regfp)























type xlenbits  = bits ty64

type mem_meta  = unit



type half  = bits ty16

type word  = bits ty32

type regidx  = bits ty5

type cregidx  = bits ty3

type csreg  = bits ty12

type regno 'n = integer

type opcode  = bits ty7

type imm12  = bits ty12

type imm20  = bits ty20

type amo  = bits ty1

type Architecture = RV32 | RV64 | RV128



type arch_xlen  = bits ty2

type priv_level  = bits ty2

type Privilege = User | Supervisor | Machine



type amoop = AMOSWAP | AMOADD | AMOXOR | AMOAND | AMOOR | AMOMIN | AMOMAX | AMOMINU | AMOMAXU



type bop = RISCV_BEQ | RISCV_BNE | RISCV_BLT | RISCV_BGE | RISCV_BLTU | RISCV_BGEU



type csrop = CSRRW | CSRRS | CSRRC



type iop = RISCV_ADDI | RISCV_SLTI | RISCV_SLTIU | RISCV_XORI | RISCV_ORI | RISCV_ANDI



type rop =
  RISCV_ADD
  | RISCV_SUB
  | RISCV_SLL
  | RISCV_SLT
  | RISCV_SLTU
  | RISCV_XOR
  | RISCV_SRL
  | RISCV_SRA
  | RISCV_OR
  | RISCV_AND



type ropw = RISCV_ADDW | RISCV_SUBW | RISCV_SLLW | RISCV_SRLW | RISCV_SRAW



type sop = RISCV_SLLI | RISCV_SRLI | RISCV_SRAI



type sopw = RISCV_SLLIW | RISCV_SRLIW | RISCV_SRAIW



type uop = RISCV_LUI | RISCV_AUIPC



type word_width = BYTE | HALF | WORD | DOUBLE



type ast  =
  | UTYPE of ((bits ty20 * regidx * uop))
  | RISCV_JAL of ((bits ty21 * regidx))
  | RISCV_JALR of ((bits ty12 * regidx * regidx))
  | BTYPE of ((bits ty13 * regidx * regidx * bop))
  | ITYPE of ((bits ty12 * regidx * regidx * iop))
  | SHIFTIOP of ((bits ty6 * regidx * regidx * sop))
  | RTYPE of ((regidx * regidx * regidx * rop))
  | LOAD of ((bits ty12 * regidx * regidx * bool * word_width * bool * bool))
  | STORE of ((bits ty12 * regidx * regidx * word_width * bool * bool))
  | ADDIW of ((bits ty12 * regidx * regidx))
  | SHIFTW of ((bits ty5 * regidx * regidx * sop))
  | RTYPEW of ((regidx * regidx * regidx * ropw))
  | SHIFTIWOP of ((bits ty5 * regidx * regidx * sopw))
  | FENCE of ((bits ty4 * bits ty4))
  | FENCE_TSO of ((bits ty4 * bits ty4))
  | FENCEI of (unit)
  | ECALL of (unit)
  | MRET of (unit)
  | SRET of (unit)
  | EBREAK of (unit)
  | WFI of (unit)
  | SFENCE_VMA of ((regidx * regidx))
  | LOADRES of ((bool * bool * regidx * word_width * regidx))
  | STORECON of ((bool * bool * regidx * regidx * word_width * regidx))
  | AMO of ((amoop * bool * bool * regidx * regidx * word_width * regidx))
  | C_NOP of (unit)
  | C_ADDI4SPN of ((cregidx * bits ty8))
  | C_LW of ((bits ty5 * cregidx * cregidx))
  | C_LD of ((bits ty5 * cregidx * cregidx))
  | C_SW of ((bits ty5 * cregidx * cregidx))
  | C_SD of ((bits ty5 * cregidx * cregidx))
  | C_ADDI of ((bits ty6 * regidx))
  | C_JAL of (bits ty11)
  | C_ADDIW of ((bits ty6 * regidx))
  | C_LI of ((bits ty6 * regidx))
  | C_ADDI16SP of (bits ty6)
  | C_LUI of ((bits ty6 * regidx))
  | C_SRLI of ((bits ty6 * cregidx))
  | C_SRAI of ((bits ty6 * cregidx))
  | C_ANDI of ((bits ty6 * cregidx))
  | C_SUB of ((cregidx * cregidx))
  | C_XOR of ((cregidx * cregidx))
  | C_OR of ((cregidx * cregidx))
  | C_AND of ((cregidx * cregidx))
  | C_SUBW of ((cregidx * cregidx))
  | C_ADDW of ((cregidx * cregidx))
  | C_J of (bits ty11)
  | C_BEQZ of ((bits ty8 * cregidx))
  | C_BNEZ of ((bits ty8 * cregidx))
  | C_SLLI of ((bits ty6 * regidx))
  | C_LWSP of ((bits ty6 * regidx))
  | C_LDSP of ((bits ty6 * regidx))
  | C_SWSP of ((bits ty6 * regidx))
  | C_SDSP of ((bits ty6 * regidx))
  | C_JR of (regidx)
  | C_JALR of (regidx)
  | C_MV of ((regidx * regidx))
  | C_EBREAK of (unit)
  | C_ADD of ((regidx * regidx))
  | MUL of ((regidx * regidx * regidx * bool * bool * bool))
  | DIV of ((regidx * regidx * regidx * bool))
  | REM of ((regidx * regidx * regidx * bool))
  | MULW of ((regidx * regidx * regidx))
  | DIVW of ((regidx * regidx * regidx * bool))
  | REMW of ((regidx * regidx * regidx * bool))
  | CSR of ((bits ty12 * regidx * regidx * bool * csrop))
  | URET of (unit)
  | STOP_FETCHING of (unit)
  | THREAD_START of (unit)
  | ILLEGAL of (word)
  | C_ILLEGAL of (half)



type Retired = RETIRE_SUCCESS | RETIRE_FAIL



type AccessType = Read | Write | ReadWrite | Execute



type exc_code  = bits ty8

type InterruptType =
  I_U_Software
  | I_S_Software
  | I_M_Software
  | I_U_Timer
  | I_S_Timer
  | I_M_Timer
  | I_U_External
  | I_S_External
  | I_M_External



type ExceptionType =
  E_Fetch_Addr_Align
  | E_Fetch_Access_Fault
  | E_Illegal_Instr
  | E_Breakpoint
  | E_Load_Addr_Align
  | E_Load_Access_Fault
  | E_SAMO_Addr_Align
  | E_SAMO_Access_Fault
  | E_U_EnvCall
  | E_S_EnvCall
  | E_Reserved_10
  | E_M_EnvCall
  | E_Fetch_Page_Fault
  | E_Load_Page_Fault
  | E_Reserved_14
  | E_SAMO_Page_Fault
  | E_CHERI



type exception  = | Error_not_implemented of (string) | Error_internal_error of (unit)



type tv_mode  = bits ty2

type TrapVectorMode = TV_Direct | TV_Vector | TV_Reserved



type ext_status  = bits ty2

type ExtStatus = Off | Initial | Clean | Dirty



type satp_mode  = bits ty4

type SATPMode = Sbare | Sv32 | Sv39 | Sv48



type csrRW  = bits ty2

type regtype  = xlenbits

type Misa  = <| Misa_Misa_chunk_0 : mword ty64; |>


type SV48_PTE  = <| SV48_PTE_SV48_PTE_chunk_0 : mword ty64; |>


type PTE_Bits  = <| PTE_Bits_PTE_Bits_chunk_0 : mword ty8; |>


type Pmpcfg_ent  = <| Pmpcfg_ent_Pmpcfg_ent_chunk_0 : mword ty8; |>


type Mstatus  = <| Mstatus_Mstatus_chunk_0 : mword ty64; |>


type Sstatus  = <| Sstatus_Sstatus_chunk_0 : mword ty64; |>


type Ustatus  = <| Ustatus_Ustatus_chunk_0 : mword ty64; |>


type Minterrupts  = <| Minterrupts_Minterrupts_chunk_0 : mword ty64; |>


type Sinterrupts  = <| Sinterrupts_Sinterrupts_chunk_0 : mword ty64; |>


type Uinterrupts  = <| Uinterrupts_Uinterrupts_chunk_0 : mword ty64; |>


type Medeleg  = <| Medeleg_Medeleg_chunk_0 : mword ty64; |>


type Sedeleg  = <| Sedeleg_Sedeleg_chunk_0 : mword ty64; |>


type Mtvec  = <| Mtvec_Mtvec_chunk_0 : mword ty64; |>


type Satp32  = <| Satp32_Satp32_chunk_0 : mword ty32; |>


type Mcause  = <| Mcause_Mcause_chunk_0 : mword ty64; |>


type Counteren  = <| Counteren_Counteren_chunk_0 : mword ty32; |>


type Satp64  = <| Satp64_Satp64_chunk_0 : mword ty64; |>


type PmpAddrMatchType = OFF | TOR | NA4 | NAPOT



type pmp_addr_range  = maybe ((xlenbits * xlenbits))

type pmpAddrMatch = PMP_NoMatch | PMP_PartialMatch | PMP_Match



type pmpMatch = PMP_Success | PMP_Continue | PMP_Fail



type Ext_FetchAddr_Check 'a = | Ext_FetchAddr_OK of (xlenbits) | Ext_FetchAddr_Error of ('a)



type Ext_ControlAddr_Check 'a = | Ext_ControlAddr_OK of (xlenbits) | Ext_ControlAddr_Error of ('a)



type Ext_DataAddr_Check 'a = | Ext_DataAddr_OK of (xlenbits) | Ext_DataAddr_Error of ('a)



type ext_fetch_addr_error  = unit

type ext_control_addr_error  = unit

type ext_data_addr_error  = unit

type ext_exception  = unit

type sync_exception  =
  <| sync_exception_trap : ExceptionType;
     sync_exception_excinfo : maybe xlenbits;
     sync_exception_ext : maybe ext_exception; |>


type interrupt_set  =
  | Ints_Pending of (xlenbits) | Ints_Delegated of (xlenbits) | Ints_Empty of (unit)



type ctl_result  =
  | CTL_TRAP of (sync_exception) | CTL_SRET of (unit) | CTL_MRET of (unit) | CTL_URET of (unit)



type MemoryOpResult 'a = | MemValue of ('a) | MemException of (ExceptionType)



type htif_cmd  = <| htif_cmd_htif_cmd_chunk_0 : mword ty64; |>


type pteAttribs  = bits ty8

type PTW_Error = PTW_Access | PTW_Invalid_PTE | PTW_No_Permission | PTW_Misaligned | PTW_PTE_Update



type vaddr32  = bits ty32

type paddr32  = bits ty34

type pte32  = bits ty32

type asid32  = bits ty9

type SV32_Vaddr  = <| SV32_Vaddr_SV32_Vaddr_chunk_0 : mword ty32; |>


type SV48_Vaddr  = <| SV48_Vaddr_SV48_Vaddr_chunk_0 : mword ty48; |>


type SV48_Paddr  = <| SV48_Paddr_SV48_Paddr_chunk_0 : mword ty56; |>


type SV32_Paddr  = <| SV32_Paddr_SV32_Paddr_chunk_0 : mword ty34; |>


type SV32_PTE  = <| SV32_PTE_SV32_PTE_chunk_0 : mword ty32; |>


type paddr64  = bits ty56

type pte64  = bits ty64

type asid64  = bits ty16

type vaddr39  = bits ty39

type SV39_Vaddr  = <| SV39_Vaddr_SV39_Vaddr_chunk_0 : mword ty39; |>


type SV39_Paddr  = <| SV39_Paddr_SV39_Paddr_chunk_0 : mword ty56; |>


type SV39_PTE  = <| SV39_PTE_SV39_PTE_chunk_0 : mword ty64; |>


type vaddr48  = bits ty48

type pte48  = bits ty64

type PTW_Result 'paddr 'pte =
  | PTW_Success of (('paddr * 'pte * 'paddr * ii * bool)) | PTW_Failure of (PTW_Error)



type TR_Result 'paddr 'failure = | TR_Address of ('paddr) | TR_Failure of ('failure)



type TLB_Entry 'asidlen 'valen 'palen 'ptelen =
  <| TLB_Entry_asid : bits 'asidlen;
     TLB_Entry_global : bool;
     TLB_Entry_vAddr : bits 'valen;
     TLB_Entry_pAddr : bits 'palen;
     TLB_Entry_vMatchMask : bits 'valen;
     TLB_Entry_vAddrMask : bits 'valen;
     TLB_Entry_pte : bits 'ptelen;
     TLB_Entry_pteAddr : bits 'palen;
     TLB_Entry_age : bits ty64; |>
declare isabelle target_sorts TLB_Entry = `len` `len` `len` `len`


type TLB39_Entry  = TLB_Entry ty16 ty39 ty56 ty64

type TLB48_Entry  = TLB_Entry ty16 ty48 ty56 ty64

type FetchResult  =
  | F_Ext_Error of (ext_fetch_addr_error)
  | F_Base of (word)
  | F_RVC of (half)
  | F_Error of ((ExceptionType * xlenbits))



type register_value  =
  | Regval_vector of ((ii * bool * list register_value))
  | Regval_list of (list register_value)
  | Regval_option of (maybe register_value)
  | Regval_Counteren of (Counteren)
  | Regval_Mcause of (Mcause)
  | Regval_Medeleg of (Medeleg)
  | Regval_Minterrupts of (Minterrupts)
  | Regval_Misa of (Misa)
  | Regval_Mstatus of (Mstatus)
  | Regval_Mtvec of (Mtvec)
  | Regval_Pmpcfg_ent of (Pmpcfg_ent)
  | Regval_Privilege of (Privilege)
  | Regval_Sedeleg of (Sedeleg)
  | Regval_Sinterrupts of (Sinterrupts)
  | Regval_TLB_Entry_16_39_56_64 of (TLB_Entry ty16 ty39 ty56 ty64)
  | Regval_TLB_Entry_16_48_56_64 of (TLB_Entry ty16 ty48 ty56 ty64)
  | Regval_bit of (bitU)
  | Regval_bitvector_32_dec of (mword ty32)
  | Regval_bitvector_64_dec of (mword ty64)
  | Regval_bool of (bool)



type regstate  =
  <| satp : mword ty64;
     tlb48 : maybe (TLB_Entry ty16 ty48 ty56 ty64);
     tlb39 : maybe (TLB_Entry ty16 ty39 ty56 ty64);
     htif_exit_code : mword ty64;
     htif_done : bool;
     htif_tohost : mword ty64;
     mtimecmp : mword ty64;
     utval : mword ty64;
     ucause : Mcause;
     uepc : mword ty64;
     uscratch : mword ty64;
     utvec : Mtvec;
     pmpaddr15 : mword ty64;
     pmpaddr14 : mword ty64;
     pmpaddr13 : mword ty64;
     pmpaddr12 : mword ty64;
     pmpaddr11 : mword ty64;
     pmpaddr10 : mword ty64;
     pmpaddr9 : mword ty64;
     pmpaddr8 : mword ty64;
     pmpaddr7 : mword ty64;
     pmpaddr6 : mword ty64;
     pmpaddr5 : mword ty64;
     pmpaddr4 : mword ty64;
     pmpaddr3 : mword ty64;
     pmpaddr2 : mword ty64;
     pmpaddr1 : mword ty64;
     pmpaddr0 : mword ty64;
     pmp15cfg : Pmpcfg_ent;
     pmp14cfg : Pmpcfg_ent;
     pmp13cfg : Pmpcfg_ent;
     pmp12cfg : Pmpcfg_ent;
     pmp11cfg : Pmpcfg_ent;
     pmp10cfg : Pmpcfg_ent;
     pmp9cfg : Pmpcfg_ent;
     pmp8cfg : Pmpcfg_ent;
     pmp7cfg : Pmpcfg_ent;
     pmp6cfg : Pmpcfg_ent;
     pmp5cfg : Pmpcfg_ent;
     pmp4cfg : Pmpcfg_ent;
     pmp3cfg : Pmpcfg_ent;
     pmp2cfg : Pmpcfg_ent;
     pmp1cfg : Pmpcfg_ent;
     pmp0cfg : Pmpcfg_ent;
     tselect : mword ty64;
     stval : mword ty64;
     scause : Mcause;
     sepc : mword ty64;
     sscratch : mword ty64;
     stvec : Mtvec;
     sideleg : Sinterrupts;
     sedeleg : Sedeleg;
     mhartid : mword ty64;
     marchid : mword ty64;
     mimpid : mword ty64;
     mvendorid : mword ty32;
     minstret_written : bool;
     minstret : mword ty64;
     mtime : mword ty64;
     mcycle : mword ty64;
     scounteren : Counteren;
     mcounteren : Counteren;
     mscratch : mword ty64;
     mtval : mword ty64;
     mepc : mword ty64;
     mcause : Mcause;
     mtvec : Mtvec;
     medeleg : Medeleg;
     mideleg : Minterrupts;
     mie : Minterrupts;
     mip : Minterrupts;
     mstatus : Mstatus;
     misa : Misa;
     cur_inst : mword ty64;
     cur_privilege : Privilege;
     x31 : mword ty64;
     x30 : mword ty64;
     x29 : mword ty64;
     x28 : mword ty64;
     x27 : mword ty64;
     x26 : mword ty64;
     x25 : mword ty64;
     x24 : mword ty64;
     x23 : mword ty64;
     x22 : mword ty64;
     x21 : mword ty64;
     x20 : mword ty64;
     x19 : mword ty64;
     x18 : mword ty64;
     x17 : mword ty64;
     x16 : mword ty64;
     x15 : mword ty64;
     x14 : mword ty64;
     x13 : mword ty64;
     x12 : mword ty64;
     x11 : mword ty64;
     x10 : mword ty64;
     x9 : mword ty64;
     x8 : mword ty64;
     x7 : mword ty64;
     x6 : mword ty64;
     x5 : mword ty64;
     x4 : mword ty64;
     x3 : mword ty64;
     x2 : mword ty64;
     x1 : mword ty64;
     Xs : list (mword ty64);
     instbits : mword ty64;
     nextPC : mword ty64;
     PC : mword ty64; |>






type MR 'a 'r = base_monadR register_value regstate 'a 'r exception
type M 'a = base_monad register_value regstate 'a exception
