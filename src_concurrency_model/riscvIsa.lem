(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Shaked Flur, University of Cambridge          2017-2018            *)
(*  Copyright Jon French, University of Cambridge                2018            *)
(*  Copyright Christopher Pulte, University of Cambridge    2017-2018            *)
(*  Copyright Robert Norton-Wright, University of Cambridge      2017            *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

(* emacs fontification -*-caml-*- *)

open import Pervasives_extra

open import Sail_impl_base
open import Utils
open import Events
open import Isa
open import InstructionSemantics
open import Sail_values
open import RegUtils
import Riscv_types
import Riscv


open import Sail_1_2_convert




let riscv_shallow_embedding : instruction_semantics Riscv_types.ast = 
  
  let decode_to_instruction (address : address) (opcode : opcode) =
    let (Opcode bytes) = opcode in
    let opcode_bitv = Sail_values.bitv_of_bytes false bytes in
    let bitv = Sail2_operators_mwords.vec_of_bits (sail_bv_1to2 opcode_bitv) in
    let instr = continue_to_sail2_done "decode" (Riscv.decode bitv) in
    FDO_success address (Just opcode) instr
  in

  let initial_outcome_of_instruction instr = 
    (ignore_outcome (sail2_prompt_to_outcome (Riscv.execute instr)),Nothing) in

  let analysis instr reanalyse reginfo environment =
    if reanalyse then
      failwith "instruction_re_analysis: RISCV instruction"
    else
      let a = (handle_reg_reads environment)
                (analysis_outcome_riscv_to_sail1
                   (sail2_prompt_to_outcome (Riscv.initial_analysis instr))) in
      process_analysis reginfo a
  in

  <| decode_to_instruction = decode_to_instruction;
     instruction_analysis = analysis;
     initial_outcome_of_instruction = initial_outcome_of_instruction;
     encode_instruction = fun _ _ -> failwith "not implemented yet" |>















let riscv_is_system_call_instruction (_: Riscv_types.ast) = Nothing

let riscv_is_thread_start_instruction = function
  | Riscv_types.THREAD_START () -> true
  | _ -> false
  end

let riscv_is_branch = function
  | Riscv_types.BTYPE _ -> true
  | _ -> false
end

let riscv_is_amo = function
  | Riscv_types.AMO _ -> true
  | _ -> false
end


let riscv_register_data_info : registerdata =
  let reg (bit_count: nat) (name: reg_base_name) (fields: list (string * slice)) =
    (name, (D_decreasing, bit_count, bit_count - 1, fields))
  in
  [ reg 64 "x0" [];
    reg 64 "x1" [];
    reg 64 "x2" [];
    reg 64 "x3" [];
    reg 64 "x4" [];
    reg 64 "x5" [];
    reg 64 "x6" [];
    reg 64 "x7" [];
    reg 64 "x8" [];
    reg 64 "x9" [];
    reg 64 "x10" [];
    reg 64 "x11" [];
    reg 64 "x12" [];
    reg 64 "x13" [];
    reg 64 "x14" [];
    reg 64 "x15" [];
    reg 64 "x16" [];
    reg 64 "x17" [];
    reg 64 "x18" [];
    reg 64 "x19" [];
    reg 64 "x20" [];
    reg 64 "x21" [];
    reg 64 "x22" [];
    reg 64 "x23" [];
    reg 64 "x24" [];
    reg 64 "x25" [];
    reg 64 "x26" [];
    reg 64 "x27" [];
    reg 64 "x28" [];
    reg 64 "x29" [];
    reg 64 "x30" [];
    reg 64 "x31" [];

    reg 64 "PC" [];
    reg 64 "nextPC" [];

    reg 1 "htif_done" [];
    reg 2 "cur_privilege" [];


    reg 65 "medeleg" [];
    reg 66 "sedeleg" [];
    reg 67 "misa"    [];
    reg 68 "mtvec"   [];
    reg 68 "stvec"   [];
    reg 69 "mideleg" [];
    reg 69 "mie"     [];
    reg 69 "mip"     [];
    reg 70 "mstatus" [];
    reg 72 "mcause"  [];
    reg 72 "scause"  [];

    reg 64 "htif_exit_code" [];
    reg 64 "htif_tohost" [];
    reg 64 "mtimecmp" [];
    reg 64 "tselect" [];
    reg 64 "stval" [];
    reg 64 "sepc" [];
    reg 64 "sscratch" [];
    reg 64 "satp" [];
    reg 64 "pmpcfg0" [];
    reg 64 "pmpaddr0" [];
    reg 64 "mhartid" [];
    reg 64 "marchid" [];
    reg 64 "mimpid" [];
    reg 64 "mvendorid" [];
    reg 64 "minstret" [];
    reg 64 "mtime" [];
    reg 64 "mcycle" [];
    reg 64 "mscratch" [];
    reg 64 "mtval" [];
    reg 64 "mepc" [];
    reg 64 "cur_inst" [];
  ]

let riscv_reg_name name : reg_name =
  match reg_from_data riscv_register_data_info name with
  | Just r -> r
  | Nothing -> fail
  end

let riscv_fixed_pseudo_registers = 
(* TODO: this is how you define fixed values for registers from the list above *)
  let fix v r = fixed_reg riscv_register_data_info v r in
  [
    (* fix 2 "cur_privilege";
     * fix 0 "medeleg";
     * fix 0 "sedeleg"; *)
    fix 0 "marchid";
    fix 0 "mimpid";
    fix 0 "mvendorid";
    (* fix 0x8000000000000881 "misa"; (* RV64IMA *) This should really be a fixed pseudoregister but Lem doesn't like the massive int *)
  ]


let riscv_thread_start_info =
  <|  (* these registers hold the arguments of the thread_start function *)
      tsi_addr  = riscv_reg_name "x10";
      tsi_toc   = Nothing;
      tsi_extra = Nothing;
      (* this register holds the value returned by the thread_start function *)
      tsi_return = riscv_reg_name "x10";

      (* these registers hold the arguments of the new-thread function *)
      tsi_f_tid  = riscv_reg_name "x10";
      tsi_f_toc  = Nothing;
      (* XXX For RISCV ABI t9 should point to function entry point on entry *)
      tsi_f_addr = Nothing;
  |>

let riscv_make_empty_write_events
    (tid:          thread_id)
    (inst: Riscv_types.ast) 
    (id_state: FreshIds.id_state ioid) 
    (ioid: ioid) 
    ((addr, size): footprint)
    (write_kind:   write_kind)
    : (list write) * (FreshIds.id_state ioid)
  =
  let addr' = integer_of_address addr in
  let write_size =
    if List.elem size [1; 2; 4; 8] && aligned addr' size then size
    else 1
  in
  make_empty_write_events' id_state tid ioid addr size write_size write_kind

let riscv_make_read_request_events
    (tid:          thread_id)
    (inst: Riscv_types.ast) 
    (id_state: FreshIds.id_state ioid) 
    (ioid: ioid) 
    ((addr, size): footprint)
    (read_kind:   read_kind)
    : (list read_request) * (FreshIds.id_state ioid)
  =
  let addr' = integer_of_address addr in
  let read_size =
    if List.elem size [1; 2; 4; 8] && aligned addr' size then size
    else 1
  in
  make_read_request_events' id_state tid ioid addr size read_size read_kind


let mips_is_atomically_fetchable_instruction _i : bool =
  failwith "not implemented"

let mips_maybe_split_conditional_branch _i =
  failwith "not implemented"

let mips_make_conditional_branch (x,y) = 
  failwith "not implemented"

let riscv_isa : isa Riscv_types.ast =
  <|  isa_model                   = RISCV;
      instruction_semantics       = riscv_shallow_embedding;

      maybe_split_conditional_branch = mips_maybe_split_conditional_branch;
      make_conditional_branch = mips_make_conditional_branch;

      is_atomically_fetchable_instruction = mips_is_atomically_fetchable_instruction;
      is_system_call_instruction  = riscv_is_system_call_instruction;
      is_thread_start_instruction = riscv_is_thread_start_instruction;
      is_branch = riscv_is_branch;
      is_amo = riscv_is_amo;

      thread_start_info           = riscv_thread_start_info;

      register_data_info          = riscv_register_data_info;
      fixed_pseudo_registers      = riscv_fixed_pseudo_registers;
      cia_reg                     = riscv_reg_name "PC";
      nia_reg                     = riscv_reg_name "nextPC";
      dia_reg                     = Nothing;

      make_empty_write_events     = riscv_make_empty_write_events;
      make_read_request_events    = riscv_make_read_request_events;
  |>



let available = true
