(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Christopher Pulte, University of Cambridge 2017-2018               *)
(*  Copyright Shaked Flur, University of Cambridge            2017               *)
(*  Copyright Jon French, University of Cambridge             2018               *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

open import Pervasives
open import Sail_impl_base
open import Fragments
open import BasicTypes
open import Events
open import Params
     import ArmV8_embed_types
open import InstructionSemantics
open import PromisingViews


                        
let is_branch = function
  | AArch64_instr (ArmV8_embed_types.CompareAndBranch _) -> true
  | AArch64_instr (ArmV8_embed_types.BranchConditional _) -> true
  | AArch64_instr (ArmV8_embed_types.TestBitAndBranch _) -> true
  | AArch64_instr (ArmV8_embed_types.BranchImmediate _) -> true
  | AArch64_instr (ArmV8_embed_types.BranchRegister _) -> true
  | RISCV_instr (Riscv_types.BTYPE _) -> true
  | _ -> false
end

let is_amo = function
  | RISCV_instr (Riscv_types.AMO _) -> true
  | _ -> false
end



let in_shared_memory params fp =
  match params.shared_memory with
  | Just sm -> exists (fp' IN sm). sub_footprint fp fp'
  | Nothing -> true
  end

let is_RISC params =
  match params.t.thread_isa_info.ism with
  | RISCV_ism -> true
  | _ -> false
  end


