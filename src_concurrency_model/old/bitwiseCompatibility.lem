(*=======================================================================================*)
(*                                                                                       *)
(*                rmem executable model                                                  *)
(*                =====================                                                  *)
(*                                                                                       *)
(*  This file is:                                                                        *)
(*                                                                                       *)
(*  Copyright Ohad Kammar, University of Cambridge (when this work was done) 2013-2014   *)
(*  Copyright Susmit Sarkar, University of St Andrews                             2014   *)
(*  Copyright Shaked Flur, University of Cambridge                                2017   *)
(*  Copyright Peter Sewell, University of Cambridge                               2014   *)
(*                                                                                       *)
(*  All rights reserved.                                                                 *)
(*                                                                                       *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in           *)
(*  LICENCE.txt.                                                                         *)
(*                                                                                       *)
(*=======================================================================================*)

open import Pervasives_extra
include import Word

type word = int32

(* 
val (land) : word -> word -> word
declare ocaml    target_rep function (land) = infix `land`
declare isabelle target_rep function (land) = `bitAND`

val (lor) : word -> word -> word
declare ocaml    target_rep function (lor) = infix `lor`
declare isabelle target_rep function (lor) = `bitOR`

val (lxor) : word -> word -> word
declare ocaml    target_rep function (lxor) = infix `lxor`
declare isabelle target_rep function (lxor) = `bitXOR`

val lnot : word -> word
declare ocaml    target_rep function lnot = `lnot`
declare isabelle target_rep function lnot = `bitNOT`
*)
val (lsl) : word -> word -> word
declare ocaml    target_rep function (lsl) u v = `Int32.shift_left` u (`Int32.to_int` v)
declare isabelle target_rep function (lsl) u v =  ``u `<<`  (`unat` v)

val (lsr) : word -> word -> word
declare ocaml    target_rep function (lsr) u v= `Int32.shift_right_logical` u (`Int32.to_int` v)
declare isabelle target_rep function (lsr) u v = ``u `>>` (`unat` v)

val (asr) : word -> word -> word
declare ocaml    target_rep function (asr) u v = `Int32.shift_right` u (`Int32.to_int` v)
declare isabelle target_rep function (asr) u v = ``u `>>>` (`unat` v)

val stringFromInt32 : word -> string
declare ocaml target_rep function stringFromInt32 = `Int32.to_string`

val to_string : word -> string
let {ocaml} to_string = stringFromInt32

