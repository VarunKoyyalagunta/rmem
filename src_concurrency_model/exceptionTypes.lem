open import Pervasives
open import Sail_impl_base
open import Events
open import Fragments
open import InstructionSemantics

(** Exceptions *)

type fetch_and_decode_exception 'i =
  | FDE_non_concrete_fetch_address_error
  | FDE_illegal_fetch_address_error of address
  | FDE_decode_error of decode_error_t 'i * address

let fetch_and_decode_exception_compare e1 e2 =
  match (e1, e2) with
  | (FDE_non_concrete_fetch_address_error, FDE_non_concrete_fetch_address_error) -> EQ
  | (FDE_non_concrete_fetch_address_error, _) -> LT
  | (_, FDE_non_concrete_fetch_address_error) -> GT

  | (FDE_illegal_fetch_address_error address1,
     FDE_illegal_fetch_address_error address2)
      -> compare address1 address2
  | (FDE_illegal_fetch_address_error _, _) -> LT
  | (_, FDE_illegal_fetch_address_error _) -> GT

  | (FDE_decode_error decode_error1 address1,
     FDE_decode_error decode_error2 address2)
      -> compare (decode_error1, address1) (decode_error2, address2)
  (* | (FDE_decode_error _ _, _) -> LT *)
  (* | (_, FDE_decode_error _ _) -> GT *)
  end

let fetch_and_decode_exception_less e1 e2       = fetch_and_decode_exception_compare e1 e2 =  LT
let fetch_and_decode_exception_less_eq e1 e2    = fetch_and_decode_exception_compare e1 e2 <> GT
let fetch_and_decode_exception_greater e1 e2    = fetch_and_decode_exception_compare e1 e2 =  GT
let fetch_and_decode_exception_greater_eq e1 e2 = fetch_and_decode_exception_compare e1 e2 <> LT

instance forall 'i. (Ord (fetch_and_decode_exception 'i))
  let compare = fetch_and_decode_exception_compare
  let (<)  = fetch_and_decode_exception_less
  let (<=) = fetch_and_decode_exception_less_eq
  let (>)  = fetch_and_decode_exception_greater
  let (>=) = fetch_and_decode_exception_greater_eq
end

let {coq; ocaml} fetch_and_decode_exception_equal e1 e2 = (fetch_and_decode_exception_compare e1 e2) = EQ
let inline {hol; isabelle} fetch_and_decode_exception_equal = unsafe_structural_equality

let {coq; ocaml} fetch_and_decode_exception_inequal e1 e2 = not (fetch_and_decode_exception_equal e1 e2)
let inline {hol; isabelle} fetch_and_decode_exception_inequal = unsafe_structural_inequality

instance forall 'i.  (Eq fetch_and_decode_exception 'i)
  let (=)  = fetch_and_decode_exception_equal
  let (<>) = fetch_and_decode_exception_inequal
 end

type exception_type 'i =
  (* the read_request and the unmapped footprint *)
  | ET_read_from_unmapped_memory of read_request * slices
  | ET_write_to_unmapped_memory of list write
  | ET_fetch_and_decode of fetch_and_decode_exception 'i
  | ET_loop_limit_reached (* this exception will be recorded in the
                          instruction instance of the branch target *)
  | ET_ISA_error of string

let exception_type_compare e1 e2 =
  match (e1, e2) with
  | (ET_read_from_unmapped_memory read_request1 slices1,
     ET_read_from_unmapped_memory read_request2 slices2)
      -> compare (read_request1, slices1) (read_request2, slices2)
  | (ET_read_from_unmapped_memory _ _, _) -> LT
  | (_, ET_read_from_unmapped_memory _ _) -> GT

  | (ET_write_to_unmapped_memory ws1, ET_write_to_unmapped_memory ws2)
      -> compare ws1 ws2
  | (ET_write_to_unmapped_memory _, _) -> LT
  | (_, ET_write_to_unmapped_memory _) -> GT

  | (ET_fetch_and_decode f1, ET_fetch_and_decode f2) -> compare f1 f2
  | (ET_fetch_and_decode _, _) -> LT
  | (_, ET_fetch_and_decode _) -> GT

  | (ET_loop_limit_reached, ET_loop_limit_reached) -> EQ
  | (ET_loop_limit_reached, _) -> LT
  | (_, ET_loop_limit_reached) -> GT

  | (ET_ISA_error s1, ET_ISA_error s2) -> compare s1 s2
  (* | (ET_ISA_error _, _) -> LT
  | (_, ET_ISA_error _) -> GT *)
  end

let exception_type_less e1 e2       = exception_type_compare e1 e2 =  LT
let exception_type_less_eq e1 e2    = exception_type_compare e1 e2 <> GT
let exception_type_greater e1 e2    = exception_type_compare e1 e2 =  GT
let exception_type_greater_eq e1 e2 = exception_type_compare e1 e2 <> LT

instance forall 'i. (Ord exception_type 'i)
  let compare = exception_type_compare
  let (<)  = exception_type_less
  let (<=) = exception_type_less_eq
  let (>)  = exception_type_greater
  let (>=) = exception_type_greater_eq
end

let {coq; ocaml} exception_type_equal e1 e2 = (exception_type_compare e1 e2) = EQ
let inline {hol; isabelle} exception_type_equal = unsafe_structural_equality
let {coq; ocaml} exception_type_inequal e1 e2 = not (exception_type_equal e1 e2)
let {hol; isabelle} exception_type_inequal = unsafe_structural_inequality

instance forall 'i. (Eq exception_type 'i)
  let (=)  = exception_type_equal
  let (<>) = exception_type_inequal
end

let showFromExceptionType = function
  | ET_read_from_unmapped_memory rr s -> "ET_read_from_unmapped_memory " ^ show rr ^ "[" ^ show s ^ "]"
  | ET_write_to_unmapped_memory ws    -> "ET_write_to_unmapped_memory " ^ show ws
  | ET_fetch_and_decode fde           -> "ET_fetch_and_decode [???]"
  | ET_loop_limit_reached             -> "ET_loop_limit_reached"
  | ET_ISA_error msg                  -> "ET_ISA_error " ^ msg
  end

instance forall 'i. (Show (exception_type 'i))
  let show = showFromExceptionType
end





(** Transition outcomes *)

type transition_outcome 'i 'a =
  | TO_system_state of 'a
  | TO_unhandled_exception of thread_id * ioid * exception_type 'i
